{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/devlinux/littletuna4.github.io/site/node_modules/.pnpm/graphology@0.26.0_graphology-types@0.24.8/node_modules/graphology/dist/graphology.mjs","sources":["file:///home/devlinux/devlinux/littletuna4.github.io/site/node_modules/.pnpm/graphology%400.26.0_graphology-types%400.24.8/node_modules/graphology/src/utils.js","file:///home/devlinux/devlinux/littletuna4.github.io/site/node_modules/.pnpm/graphology%400.26.0_graphology-types%400.24.8/node_modules/graphology/src/errors.js","file:///home/devlinux/devlinux/littletuna4.github.io/site/node_modules/.pnpm/graphology%400.26.0_graphology-types%400.24.8/node_modules/graphology/src/data.js","file:///home/devlinux/devlinux/littletuna4.github.io/site/node_modules/.pnpm/graphology%400.26.0_graphology-types%400.24.8/node_modules/graphology/src/attributes/nodes.js","file:///home/devlinux/devlinux/littletuna4.github.io/site/node_modules/.pnpm/graphology%400.26.0_graphology-types%400.24.8/node_modules/graphology/src/attributes/edges.js","file:///home/devlinux/devlinux/littletuna4.github.io/site/node_modules/.pnpm/graphology%400.26.0_graphology-types%400.24.8/node_modules/graphology/src/iteration/edges.js","file:///home/devlinux/devlinux/littletuna4.github.io/site/node_modules/.pnpm/graphology%400.26.0_graphology-types%400.24.8/node_modules/graphology/src/iteration/neighbors.js","file:///home/devlinux/devlinux/littletuna4.github.io/site/node_modules/.pnpm/graphology%400.26.0_graphology-types%400.24.8/node_modules/graphology/src/iteration/adjacency.js","file:///home/devlinux/devlinux/littletuna4.github.io/site/node_modules/.pnpm/graphology%400.26.0_graphology-types%400.24.8/node_modules/graphology/src/serialization.js","file:///home/devlinux/devlinux/littletuna4.github.io/site/node_modules/.pnpm/graphology%400.26.0_graphology-types%400.24.8/node_modules/graphology/src/graph.js","file:///home/devlinux/devlinux/littletuna4.github.io/site/node_modules/.pnpm/graphology%400.26.0_graphology-types%400.24.8/node_modules/graphology/src/classes.js","file:///home/devlinux/devlinux/littletuna4.github.io/site/node_modules/.pnpm/graphology%400.26.0_graphology-types%400.24.8/node_modules/graphology/src/endpoint.esm.js"],"sourcesContent":["/**\n * Graphology Utilities\n * =====================\n *\n * Collection of helpful functions used by the implementation.\n */\n\n/**\n * Object.assign-like polyfill.\n *\n * @param  {object} target       - First object.\n * @param  {object} [...objects] - Objects to merge.\n * @return {object}\n */\nfunction assignPolyfill() {\n  const target = arguments[0];\n\n  for (let i = 1, l = arguments.length; i < l; i++) {\n    if (!arguments[i]) continue;\n\n    for (const k in arguments[i]) target[k] = arguments[i][k];\n  }\n\n  return target;\n}\n\nlet assign = assignPolyfill;\n\nif (typeof Object.assign === 'function') assign = Object.assign;\n\nexport {assign};\n\n/**\n * Function returning the first matching edge for given path.\n * Note: this function does not check the existence of source & target. This\n * must be performed by the caller.\n *\n * @param  {Graph}  graph  - Target graph.\n * @param  {any}    source - Source node.\n * @param  {any}    target - Target node.\n * @param  {string} type   - Type of the edge (mixed, directed or undirected).\n * @return {string|null}\n */\nexport function getMatchingEdge(graph, source, target, type) {\n  const sourceData = graph._nodes.get(source);\n\n  let edge = null;\n\n  if (!sourceData) return edge;\n\n  if (type === 'mixed') {\n    edge =\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]);\n  } else if (type === 'directed') {\n    edge = sourceData.out && sourceData.out[target];\n  } else {\n    edge = sourceData.undirected && sourceData.undirected[target];\n  }\n\n  return edge;\n}\n\n/**\n * Checks whether the given value is a plain object.\n *\n * @param  {mixed}   value - Target value.\n * @return {boolean}\n */\nexport function isPlainObject(value) {\n  // NOTE: as per https://github.com/graphology/graphology/issues/149\n  // this function has been loosened not to reject object instances\n  // coming from other JavaScript contexts. It has also been chosen\n  // not to improve it to avoid obvious false positives and avoid\n  // taking a performance hit. People should really use TypeScript\n  // if they want to avoid feeding subtly irrelvant attribute objects.\n  return typeof value === 'object' && value !== null;\n}\n\n/**\n * Checks whether the given object is empty.\n *\n * @param  {object}  o - Target Object.\n * @return {boolean}\n */\nexport function isEmpty(o) {\n  let k;\n\n  for (k in o) return false;\n\n  return true;\n}\n\n/**\n * Creates a \"private\" property for the given member name by concealing it\n * using the `enumerable` option.\n *\n * @param {object} target - Target object.\n * @param {string} name   - Member name.\n */\nexport function privateProperty(target, name, value) {\n  Object.defineProperty(target, name, {\n    enumerable: false,\n    configurable: false,\n    writable: true,\n    value\n  });\n}\n\n/**\n * Creates a read-only property for the given member name & the given getter.\n *\n * @param {object}   target - Target object.\n * @param {string}   name   - Member name.\n * @param {mixed}    value  - The attached getter or fixed value.\n */\nexport function readOnlyProperty(target, name, value) {\n  const descriptor = {\n    enumerable: true,\n    configurable: true\n  };\n\n  if (typeof value === 'function') {\n    descriptor.get = value;\n  } else {\n    descriptor.value = value;\n    descriptor.writable = false;\n  }\n\n  Object.defineProperty(target, name, descriptor);\n}\n\n/**\n * Returns whether the given object constitute valid hints.\n *\n * @param {object} hints - Target object.\n */\nexport function validateHints(hints) {\n  if (!isPlainObject(hints)) return false;\n\n  if (hints.attributes && !Array.isArray(hints.attributes)) return false;\n\n  return true;\n}\n\n/**\n * Creates a function generating incremental ids for edges.\n *\n * @return {function}\n */\nexport function incrementalIdStartingFromRandomByte() {\n  let i = Math.floor(Math.random() * 256) & 0xff;\n\n  return () => {\n    return i++;\n  };\n}\n\n/**\n * Chains multiple iterators into a single iterator.\n *\n * @param {...Iterator} iterables\n * @returns {Iterator}\n */\nexport function chain() {\n  const iterables = arguments;\n  let current = null;\n  let i = -1;\n\n  return {\n    [Symbol.iterator]() {\n      return this;\n    },\n    next() {\n      let step = null;\n\n      do {\n        if (current === null) {\n          i++;\n          if (i >= iterables.length) return {done: true};\n          current = iterables[i][Symbol.iterator]();\n        }\n        step = current.next();\n        if (step.done) {\n          current = null;\n          continue;\n        }\n        break;\n        // eslint-disable-next-line no-constant-condition\n      } while (true);\n\n      return step;\n    }\n  };\n}\n\n/**\n * Maps the given iterable using the provided function.\n *\n * @param {Iterable} iterable\n * @param {Function} fn\n * @returns {Iterator}\n */\nexport function map(iterable, fn) {\n  return {\n    [Symbol.iterator]() {\n      return this;\n    },\n    next() {\n      const step = iterable.next();\n      if (step.done) return step;\n      return {value: fn(step.value), done: false};\n    }\n  };\n}\n\nexport function emptyIterator() {\n  return {\n    [Symbol.iterator]() {\n      return this;\n    },\n    next() {\n      return {done: true};\n    }\n  };\n}\n","/**\n * Graphology Custom Errors\n * =========================\n *\n * Defining custom errors for ease of use & easy unit tests across\n * implementations (normalized typology rather than relying on error\n * messages to check whether the correct error was found).\n */\nexport class GraphError extends Error {\n  constructor(message) {\n    super();\n    this.name = 'GraphError';\n    this.message = message;\n  }\n}\n\nexport class InvalidArgumentsGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'InvalidArgumentsGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(\n        this,\n        InvalidArgumentsGraphError.prototype.constructor\n      );\n  }\n}\n\nexport class NotFoundGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'NotFoundGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, NotFoundGraphError.prototype.constructor);\n  }\n}\n\nexport class UsageGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'UsageGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, UsageGraphError.prototype.constructor);\n  }\n}\n","/**\n * Graphology Internal Data Classes\n * =================================\n *\n * Internal classes hopefully reduced to structs by engines & storing\n * necessary information for nodes & edges.\n *\n * Note that those classes don't rely on the `class` keyword to avoid some\n * cruft introduced by most of ES2015 transpilers.\n */\n\n/**\n * MixedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function MixedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nMixedNodeData.prototype.clear = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.undirectedDegree = 0;\n  this.undirectedLoops = 0;\n  this.directedLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n  this.undirected = {};\n};\n\n/**\n * DirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function DirectedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nDirectedNodeData.prototype.clear = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.directedLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n};\n\n/**\n * UndirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function UndirectedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nUndirectedNodeData.prototype.clear = function () {\n  // Degrees\n  this.undirectedDegree = 0;\n  this.undirectedLoops = 0;\n\n  // Indices\n  this.undirected = {};\n};\n\n/**\n * EdgeData class.\n *\n * @constructor\n * @param {boolean} undirected   - Whether the edge is undirected.\n * @param {string}  string       - The edge's key.\n * @param {string}  source       - Source of the edge.\n * @param {string}  target       - Target of the edge.\n * @param {object}  attributes   - Edge's attributes.\n */\nexport function EdgeData(undirected, key, source, target, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n  this.undirected = undirected;\n\n  // Extremities\n  this.source = source;\n  this.target = target;\n}\n\nEdgeData.prototype.attach = function () {\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  const source = this.source.key;\n  const target = this.target.key;\n\n  // Handling source\n  this.source[outKey][target] = this;\n\n  if (this.undirected && source === target) return;\n\n  // Handling target\n  this.target[inKey][source] = this;\n};\n\nEdgeData.prototype.attachMulti = function () {\n  let outKey = 'out';\n  let inKey = 'in';\n\n  const source = this.source.key;\n  const target = this.target.key;\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  // Handling source\n  const adj = this.source[outKey];\n  const head = adj[target];\n\n  if (typeof head === 'undefined') {\n    adj[target] = this;\n\n    // Self-loop optimization\n    if (!(this.undirected && source === target)) {\n      // Handling target\n      this.target[inKey][source] = this;\n    }\n\n    return;\n  }\n\n  // Prepending to doubly-linked list\n  head.previous = this;\n  this.next = head;\n\n  // Pointing to new head\n  // NOTE: use mutating swap later to avoid lookup?\n  adj[target] = this;\n  this.target[inKey][source] = this;\n};\n\nEdgeData.prototype.detach = function () {\n  const source = this.source.key;\n  const target = this.target.key;\n\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  delete this.source[outKey][target];\n\n  // No-op delete in case of undirected self-loop\n  delete this.target[inKey][source];\n};\n\nEdgeData.prototype.detachMulti = function () {\n  const source = this.source.key;\n  const target = this.target.key;\n\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  // Deleting from doubly-linked list\n  if (this.previous === undefined) {\n    // We are dealing with the head\n\n    // Should we delete the adjacency entry because it is now empty?\n    if (this.next === undefined) {\n      delete this.source[outKey][target];\n\n      // No-op delete in case of undirected self-loop\n      delete this.target[inKey][source];\n    } else {\n      // Detaching\n      this.next.previous = undefined;\n\n      // NOTE: could avoid the lookups by creating a #.become mutating method\n      this.source[outKey][target] = this.next;\n\n      // No-op delete in case of undirected self-loop\n      this.target[inKey][source] = this.next;\n    }\n  } else {\n    // We are dealing with another list node\n    this.previous.next = this.next;\n\n    // If not last\n    if (this.next !== undefined) {\n      this.next.previous = this.previous;\n    }\n  }\n};\n","/**\n * Graphology Node Attributes methods\n * ===================================\n */\nimport {assign, isPlainObject} from '../utils';\n\nimport {InvalidArgumentsGraphError, NotFoundGraphError} from '../errors';\n\nconst NODE = 0;\nconst SOURCE = 1;\nconst TARGET = 2;\nconst OPPOSITE = 3;\n\nfunction findRelevantNodeData(\n  graph,\n  method,\n  mode,\n  nodeOrEdge,\n  nameOrEdge,\n  add1,\n  add2\n) {\n  let nodeData, edgeData, arg1, arg2;\n\n  nodeOrEdge = '' + nodeOrEdge;\n\n  if (mode === NODE) {\n    nodeData = graph._nodes.get(nodeOrEdge);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${nodeOrEdge}\" node in the graph.`\n      );\n\n    arg1 = nameOrEdge;\n    arg2 = add1;\n  } else if (mode === OPPOSITE) {\n    nameOrEdge = '' + nameOrEdge;\n\n    edgeData = graph._edges.get(nameOrEdge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${nameOrEdge}\" edge in the graph.`\n      );\n\n    const source = edgeData.source.key;\n    const target = edgeData.target.key;\n\n    if (nodeOrEdge === source) {\n      nodeData = edgeData.target;\n    } else if (nodeOrEdge === target) {\n      nodeData = edgeData.source;\n    } else {\n      throw new NotFoundGraphError(\n        `Graph.${method}: the \"${nodeOrEdge}\" node is not attached to the \"${nameOrEdge}\" edge (${source}, ${target}).`\n      );\n    }\n\n    arg1 = add1;\n    arg2 = add2;\n  } else {\n    edgeData = graph._edges.get(nodeOrEdge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${nodeOrEdge}\" edge in the graph.`\n      );\n\n    if (mode === SOURCE) {\n      nodeData = edgeData.source;\n    } else {\n      nodeData = edgeData.target;\n    }\n\n    arg1 = nameOrEdge;\n    arg2 = add1;\n  }\n\n  return [nodeData, arg1, arg2];\n}\n\nfunction attachNodeAttributeGetter(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, name] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    return data.attributes[name];\n  };\n}\n\nfunction attachNodeAttributesGetter(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge) {\n    const [data] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge\n    );\n\n    return data.attributes;\n  };\n}\n\nfunction attachNodeAttributeChecker(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, name] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    return data.attributes.hasOwnProperty(name);\n  };\n}\n\nfunction attachNodeAttributeSetter(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1, add2) {\n    const [data, name, value] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1,\n      add2\n    );\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributeUpdater(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1, add2) {\n    const [data, name, updater] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1,\n      add2\n    );\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: updater should be a function.`\n      );\n\n    const attributes = data.attributes;\n    const value = updater(attributes[name]);\n\n    attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributeRemover(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, name] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributesReplacer(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, attributes] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributesMerger(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, attributes] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributesUpdater(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, updater] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided updater is not a function.`\n      );\n\n    data.attributes = updater(data.attributes);\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'update',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * List of methods to attach.\n */\nconst NODE_ATTRIBUTES_METHODS = [\n  {\n    name: element => `get${element}Attribute`,\n    attacher: attachNodeAttributeGetter\n  },\n  {\n    name: element => `get${element}Attributes`,\n    attacher: attachNodeAttributesGetter\n  },\n  {\n    name: element => `has${element}Attribute`,\n    attacher: attachNodeAttributeChecker\n  },\n  {\n    name: element => `set${element}Attribute`,\n    attacher: attachNodeAttributeSetter\n  },\n  {\n    name: element => `update${element}Attribute`,\n    attacher: attachNodeAttributeUpdater\n  },\n  {\n    name: element => `remove${element}Attribute`,\n    attacher: attachNodeAttributeRemover\n  },\n  {\n    name: element => `replace${element}Attributes`,\n    attacher: attachNodeAttributesReplacer\n  },\n  {\n    name: element => `merge${element}Attributes`,\n    attacher: attachNodeAttributesMerger\n  },\n  {\n    name: element => `update${element}Attributes`,\n    attacher: attachNodeAttributesUpdater\n  }\n];\n\n/**\n * Attach every attributes-related methods to a Graph class.\n *\n * @param {function} Graph - Target class.\n */\nexport default function attachNodeAttributesMethods(Graph) {\n  NODE_ATTRIBUTES_METHODS.forEach(function ({name, attacher}) {\n    // For nodes\n    attacher(Graph, name('Node'), NODE);\n\n    // For sources\n    attacher(Graph, name('Source'), SOURCE);\n\n    // For targets\n    attacher(Graph, name('Target'), TARGET);\n\n    // For opposites\n    attacher(Graph, name('Opposite'), OPPOSITE);\n  });\n}\n","/**\n * Graphology Edge Attributes methods\n * ===================================\n */\nimport {assign, isPlainObject, getMatchingEdge} from '../utils';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from '../errors';\n\n/**\n * Attach an attribute getter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeGetter(Class, method, type) {\n  /**\n   * Get the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {mixed}          - The attribute's value.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    return data.attributes[name];\n  };\n}\n\n/**\n * Attach an attributes getter method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachEdgeAttributesGetter(Class, method, type) {\n  /**\n   * Retrieves all the target element's attributes.\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   *\n   * @return {object}          - The element's attributes.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 1) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + arguments[1];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    return data.attributes;\n  };\n}\n\n/**\n * Attach an attribute checker method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachEdgeAttributeChecker(Class, method, type) {\n  /**\n   * Checks whether the desired attribute is set for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    return data.attributes.hasOwnProperty(name);\n  };\n}\n\n/**\n * Attach an attribute setter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeSetter(Class, method, type) {\n  /**\n   * Set the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name, value) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 3) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n      value = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute updater method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeUpdater(Class, method, type) {\n  /**\n   * Update the desired attribute for the given element (node or edge) using\n   * the provided function.\n   *\n   * Arity 2:\n   * @param  {any}      element - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}      source  - Source element.\n   * @param  {any}      target  - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * @return {Graph}            - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name, updater) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 3) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n      updater = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: updater should be a function.`\n      );\n\n    data.attributes[name] = updater(data.attributes[name]);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute remover method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeRemover(Class, method, type) {\n  /**\n   * Remove the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute replacer method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributesReplacer(Class, method, type) {\n  /**\n   * Replace the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - New attributes.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - New attributes.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute merger method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributesMerger(Class, method, type) {\n  /**\n   * Merge the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - Attributes to merge.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - Attributes to merge.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute updater method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributesUpdater(Class, method, type) {\n  /**\n   * Update the attributes of the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}      element - Target element.\n   * @param  {function} updater - Updater function.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}      source  - Source element.\n   * @param  {any}      target  - Target element.\n   * @param  {function} updater - Updater function.\n   *\n   * @return {Graph}            - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, updater) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + updater;\n\n      updater = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided updater is not a function.`\n      );\n\n    data.attributes = updater(data.attributes);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'update',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * List of methods to attach.\n */\nconst EDGE_ATTRIBUTES_METHODS = [\n  {\n    name: element => `get${element}Attribute`,\n    attacher: attachEdgeAttributeGetter\n  },\n  {\n    name: element => `get${element}Attributes`,\n    attacher: attachEdgeAttributesGetter\n  },\n  {\n    name: element => `has${element}Attribute`,\n    attacher: attachEdgeAttributeChecker\n  },\n  {\n    name: element => `set${element}Attribute`,\n    attacher: attachEdgeAttributeSetter\n  },\n  {\n    name: element => `update${element}Attribute`,\n    attacher: attachEdgeAttributeUpdater\n  },\n  {\n    name: element => `remove${element}Attribute`,\n    attacher: attachEdgeAttributeRemover\n  },\n  {\n    name: element => `replace${element}Attributes`,\n    attacher: attachEdgeAttributesReplacer\n  },\n  {\n    name: element => `merge${element}Attributes`,\n    attacher: attachEdgeAttributesMerger\n  },\n  {\n    name: element => `update${element}Attributes`,\n    attacher: attachEdgeAttributesUpdater\n  }\n];\n\n/**\n * Attach every attributes-related methods to a Graph class.\n *\n * @param {function} Graph - Target class.\n */\nexport default function attachEdgeAttributesMethods(Graph) {\n  EDGE_ATTRIBUTES_METHODS.forEach(function ({name, attacher}) {\n    // For edges\n    attacher(Graph, name('Edge'), 'mixed');\n\n    // For directed edges\n    attacher(Graph, name('DirectedEdge'), 'directed');\n\n    // For undirected edges\n    attacher(Graph, name('UndirectedEdge'), 'undirected');\n  });\n}\n","/**\n * Graphology Edge Iteration\n * ==========================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's edges.\n */\nimport {chain, emptyIterator} from '../utils';\n\nimport {InvalidArgumentsGraphError, NotFoundGraphError} from '../errors';\n\n/**\n * Definitions.\n */\nconst EDGES_ITERATION = [\n  {\n    name: 'edges',\n    type: 'mixed'\n  },\n  {\n    name: 'inEdges',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outEdges',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundEdges',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundEdges',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedEdges',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedEdges',\n    type: 'undirected'\n  }\n];\n\n/**\n * Function iterating over edges from the given object to match one of them.\n *\n * @param {object}   object   - Target object.\n * @param {function} callback - Function to call.\n */\nfunction forEachSimple(breakable, object, callback, avoid) {\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    const edgeData = object[k];\n\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n\n    if (breakable && shouldBreak) return edgeData.key;\n  }\n\n  return;\n}\n\nfunction forEachMulti(breakable, object, callback, avoid) {\n  let edgeData, source, target;\n\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    edgeData = object[k];\n\n    do {\n      source = edgeData.source;\n      target = edgeData.target;\n\n      shouldBreak = callback(\n        edgeData.key,\n        edgeData.attributes,\n        source.key,\n        target.key,\n        source.attributes,\n        target.attributes,\n        edgeData.undirected\n      );\n\n      if (breakable && shouldBreak) return edgeData.key;\n\n      edgeData = edgeData.next;\n    } while (edgeData !== undefined);\n  }\n\n  return;\n}\n\n/**\n * Function returning an iterator over edges from the given object.\n *\n * @param  {object}   object - Target object.\n * @return {Iterator}\n */\nfunction createIterator(object, avoid) {\n  const keys = Object.keys(object);\n  const l = keys.length;\n\n  let edgeData;\n  let i = 0;\n\n  return {\n    [Symbol.iterator]() {\n      return this;\n    },\n    next() {\n      do {\n        if (!edgeData) {\n          if (i >= l) return {done: true};\n\n          const k = keys[i++];\n\n          if (k === avoid) {\n            edgeData = undefined;\n            continue;\n          }\n\n          edgeData = object[k];\n        } else {\n          edgeData = edgeData.next;\n        }\n      } while (!edgeData);\n\n      return {\n        done: false,\n        value: {\n          edge: edgeData.key,\n          attributes: edgeData.attributes,\n          source: edgeData.source.key,\n          target: edgeData.target.key,\n          sourceAttributes: edgeData.source.attributes,\n          targetAttributes: edgeData.target.attributes,\n          undirected: edgeData.undirected\n        }\n      };\n    }\n  };\n}\n\n/**\n * Function iterating over the egdes from the object at given key to match\n * one of them.\n *\n * @param {object}   object   - Target object.\n * @param {mixed}    k        - Neighbor key.\n * @param {function} callback - Callback to use.\n */\nfunction forEachForKeySimple(breakable, object, k, callback) {\n  const edgeData = object[k];\n\n  if (!edgeData) return;\n\n  const sourceData = edgeData.source;\n  const targetData = edgeData.target;\n\n  if (\n    callback(\n      edgeData.key,\n      edgeData.attributes,\n      sourceData.key,\n      targetData.key,\n      sourceData.attributes,\n      targetData.attributes,\n      edgeData.undirected\n    ) &&\n    breakable\n  )\n    return edgeData.key;\n}\n\nfunction forEachForKeyMulti(breakable, object, k, callback) {\n  let edgeData = object[k];\n\n  if (!edgeData) return;\n\n  let shouldBreak = false;\n\n  do {\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n\n    if (breakable && shouldBreak) return edgeData.key;\n\n    edgeData = edgeData.next;\n  } while (edgeData !== undefined);\n\n  return;\n}\n\n/**\n * Function returning an iterator over the egdes from the object at given key.\n *\n * @param  {object}   object   - Target object.\n * @param  {mixed}    k        - Neighbor key.\n * @return {Iterator}\n */\nfunction createIteratorForKey(object, k) {\n  let edgeData = object[k];\n\n  if (edgeData.next !== undefined) {\n    return {\n      [Symbol.iterator]() {\n        return this;\n      },\n      next() {\n        if (!edgeData) return {done: true};\n\n        const value = {\n          edge: edgeData.key,\n          attributes: edgeData.attributes,\n          source: edgeData.source.key,\n          target: edgeData.target.key,\n          sourceAttributes: edgeData.source.attributes,\n          targetAttributes: edgeData.target.attributes,\n          undirected: edgeData.undirected\n        };\n\n        edgeData = edgeData.next;\n\n        return {\n          done: false,\n          value\n        };\n      }\n    };\n  }\n\n  let done = false;\n  return {\n    [Symbol.iterator]() {\n      return this;\n    },\n    next() {\n      if (done === true) return {done: true};\n      done = true;\n      return {\n        done: false,\n        value: {\n          edge: edgeData.key,\n          attributes: edgeData.attributes,\n          source: edgeData.source.key,\n          target: edgeData.target.key,\n          sourceAttributes: edgeData.source.attributes,\n          targetAttributes: edgeData.target.attributes,\n          undirected: edgeData.undirected\n        }\n      };\n    }\n  };\n}\n\n/**\n * Function creating an array of edges for the given type.\n *\n * @param  {Graph}   graph - Target Graph instance.\n * @param  {string}  type  - Type of edges to retrieve.\n * @return {array}         - Array of edges.\n */\nfunction createEdgeArray(graph, type) {\n  if (graph.size === 0) return [];\n\n  if (type === 'mixed' || type === graph.type) {\n    return Array.from(graph._edges.keys());\n  }\n\n  const size =\n    type === 'undirected' ? graph.undirectedSize : graph.directedSize;\n\n  const list = new Array(size),\n    mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  let i = 0;\n  let step, data;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (data.undirected === mask) list[i++] = data.key;\n  }\n\n  return list;\n}\n\n/**\n * Function iterating over a graph's edges using a callback to match one of\n * them.\n *\n * @param  {Graph}    graph    - Target Graph instance.\n * @param  {string}   type     - Type of edges to retrieve.\n * @param  {function} callback - Function to call.\n */\nfunction forEachEdge(breakable, graph, type, callback) {\n  if (graph.size === 0) return;\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  let step, data;\n  let shouldBreak = false;\n  const iterator = graph._edges.values();\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (shouldFilter && data.undirected !== mask) continue;\n\n    const {key, attributes, source, target} = data;\n\n    shouldBreak = callback(\n      key,\n      attributes,\n      source.key,\n      target.key,\n      source.attributes,\n      target.attributes,\n      data.undirected\n    );\n\n    if (breakable && shouldBreak) return key;\n  }\n\n  return;\n}\n\n/**\n * Function creating an iterator of edges for the given type.\n *\n * @param  {Graph}    graph - Target Graph instance.\n * @param  {string}   type  - Type of edges to retrieve.\n * @return {Iterator}\n */\nfunction createEdgeIterator(graph, type) {\n  if (graph.size === 0) return emptyIterator();\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  return {\n    [Symbol.iterator]() {\n      return this;\n    },\n    next() {\n      let step, data;\n\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        step = iterator.next();\n\n        if (step.done) return step;\n\n        data = step.value;\n\n        if (shouldFilter && data.undirected !== mask) continue;\n\n        break;\n      }\n\n      const value = {\n        edge: data.key,\n        attributes: data.attributes,\n        source: data.source.key,\n        target: data.target.key,\n        sourceAttributes: data.source.attributes,\n        targetAttributes: data.target.attributes,\n        undirected: data.undirected\n      };\n\n      return {value, done: false};\n    }\n  };\n}\n\n/**\n * Function iterating over a node's edges using a callback to match one of them.\n *\n * @param  {boolean}  multi     - Whether the graph is multi or not.\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Function to call.\n */\nfunction forEachEdgeForNode(\n  breakable,\n  multi,\n  type,\n  direction,\n  nodeData,\n  callback\n) {\n  const fn = multi ? forEachMulti : forEachSimple;\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      found = fn(breakable, nodeData.in, callback);\n\n      if (breakable && found) return found;\n    }\n    if (direction !== 'in') {\n      found = fn(\n        breakable,\n        nodeData.out,\n        callback,\n        !direction ? nodeData.key : undefined\n      );\n\n      if (breakable && found) return found;\n    }\n  }\n\n  if (type !== 'directed') {\n    found = fn(breakable, nodeData.undirected, callback);\n\n    if (breakable && found) return found;\n  }\n\n  return;\n}\n\n/**\n * Function creating an array of edges for the given type & the given node.\n *\n * @param  {boolean} multi     - Whether the graph is multi or not.\n * @param  {string}  type      - Type of edges to retrieve.\n * @param  {string}  direction - In or out?\n * @param  {any}     nodeData  - Target node's data.\n * @return {array}             - Array of edges.\n */\nfunction createEdgeArrayForNode(multi, type, direction, nodeData) {\n  const edges = []; // TODO: possibility to know size beforehand or factorize with map\n\n  forEachEdgeForNode(false, multi, type, direction, nodeData, function (key) {\n    edges.push(key);\n  });\n\n  return edges;\n}\n\n/**\n * Function iterating over a node's edges using a callback.\n *\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createEdgeIteratorForNode(type, direction, nodeData) {\n  let iterator = emptyIterator();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out' && typeof nodeData.in !== 'undefined')\n      iterator = chain(iterator, createIterator(nodeData.in));\n    if (direction !== 'in' && typeof nodeData.out !== 'undefined')\n      iterator = chain(\n        iterator,\n        createIterator(nodeData.out, !direction ? nodeData.key : undefined)\n      );\n  }\n\n  if (type !== 'directed' && typeof nodeData.undirected !== 'undefined') {\n    iterator = chain(iterator, createIterator(nodeData.undirected));\n  }\n\n  return iterator;\n}\n\n/**\n * Function iterating over edges for the given path using a callback to match\n * one of them.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction forEachEdgeForPath(\n  breakable,\n  type,\n  multi,\n  direction,\n  sourceData,\n  target,\n  callback\n) {\n  const fn = multi ? forEachForKeyMulti : forEachForKeySimple;\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out') {\n      found = fn(breakable, sourceData.in, target, callback);\n\n      if (breakable && found) return found;\n    }\n\n    if (\n      typeof sourceData.out !== 'undefined' &&\n      direction !== 'in' &&\n      (direction || sourceData.key !== target)\n    ) {\n      found = fn(breakable, sourceData.out, target, callback);\n\n      if (breakable && found) return found;\n    }\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined') {\n      found = fn(breakable, sourceData.undirected, target, callback);\n\n      if (breakable && found) return found;\n    }\n  }\n\n  return;\n}\n\n/**\n * Function creating an array of edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {any}      target     - Target node.\n * @return {array}               - Array of edges.\n */\nfunction createEdgeArrayForPath(type, multi, direction, sourceData, target) {\n  const edges = []; // TODO: possibility to know size beforehand or factorize with map\n\n  forEachEdgeForPath(\n    false,\n    type,\n    multi,\n    direction,\n    sourceData,\n    target,\n    function (key) {\n      edges.push(key);\n    }\n  );\n\n  return edges;\n}\n\n/**\n * Function returning an iterator over edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction createEdgeIteratorForPath(type, direction, sourceData, target) {\n  let iterator = emptyIterator();\n\n  if (type !== 'undirected') {\n    if (\n      typeof sourceData.in !== 'undefined' &&\n      direction !== 'out' &&\n      target in sourceData.in\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.in, target));\n\n    if (\n      typeof sourceData.out !== 'undefined' &&\n      direction !== 'in' &&\n      target in sourceData.out &&\n      (direction || sourceData.key !== target)\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.out, target));\n  }\n\n  if (type !== 'directed') {\n    if (\n      typeof sourceData.undirected !== 'undefined' &&\n      target in sourceData.undirected\n    )\n      iterator = chain(\n        iterator,\n        createIteratorForKey(sourceData.undirected, target)\n      );\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching an edge array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeArrayCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  /**\n   * Function returning an array of certain edges.\n   *\n   * Arity 0: Return all the relevant edges.\n   *\n   * Arity 1: Return all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Return the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function (source, target) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    if (!arguments.length) return createEdgeArray(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${name}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      return createEdgeArrayForNode(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData\n      );\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return createEdgeArrayForPath(\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`\n    );\n  };\n}\n\n/**\n * Function attaching a edge callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachEdge(Class, description) {\n  const {name, type, direction} = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function (source, target, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return forEachEdge(false, this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return forEachEdgeForNode(\n        false,\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return forEachEdgeForPath(\n        false,\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target,\n        callback\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${forEachName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`\n    );\n  };\n\n  /**\n   * Function mapping the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Map all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Map all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Map the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const mapName = 'map' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[mapName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    let result;\n\n    // We know the result length beforehand\n    if (args.length === 0) {\n      let length = 0;\n\n      if (type !== 'directed') length += this.undirectedSize;\n      if (type !== 'undirected') length += this.directedSize;\n\n      result = new Array(length);\n\n      let i = 0;\n\n      args.push((e, ea, s, t, sa, ta, u) => {\n        result[i++] = callback(e, ea, s, t, sa, ta, u);\n      });\n    }\n\n    // We don't know the result length beforehand\n    // TODO: we can in some instances of simple graphs, knowing degree\n    else {\n      result = [];\n\n      args.push((e, ea, s, t, sa, ta, u) => {\n        result.push(callback(e, ea, s, t, sa, ta, u));\n      });\n    }\n\n    this[forEachName].apply(this, args);\n\n    return result;\n  };\n\n  /**\n   * Function filtering the graph's relevant edges using the provided predicate\n   * function.\n   *\n   * Arity 1: Filter all the relevant edges.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * Arity 2: Filter all of a node's relevant edges.\n   * @param  {any}      node      - Target node.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * Arity 3: Filter the relevant edges across the given path.\n   * @param  {any}      source    - Source node.\n   * @param  {any}      target    - Target node.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[filterName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    const result = [];\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      if (callback(e, ea, s, t, sa, ta, u)) result.push(e);\n    });\n\n    this[forEachName].apply(this, args);\n\n    return result;\n  };\n\n  /**\n   * Function reducing the graph's relevant edges using the provided accumulator\n   * function.\n   *\n   * Arity 1: Reduce all the relevant edges.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * Arity 2: Reduce all of a node's relevant edges.\n   * @param  {any}      node         - Target node.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * Arity 3: Reduce the relevant edges across the given path.\n   * @param  {any}      source       - Source node.\n   * @param  {any}      target       - Target node.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[reduceName] = function () {\n    let args = Array.prototype.slice.call(arguments);\n\n    if (args.length < 2 || args.length > 4) {\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: invalid number of arguments (expecting 2, 3 or 4 and got ${args.length}).`\n      );\n    }\n\n    if (\n      typeof args[args.length - 1] === 'function' &&\n      typeof args[args.length - 2] !== 'function'\n    ) {\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`\n      );\n    }\n\n    let callback;\n    let initialValue;\n\n    if (args.length === 2) {\n      callback = args[0];\n      initialValue = args[1];\n      args = [];\n    } else if (args.length === 3) {\n      callback = args[1];\n      initialValue = args[2];\n      args = [args[0]];\n    } else if (args.length === 4) {\n      callback = args[2];\n      initialValue = args[3];\n      args = [args[0], args[1]];\n    }\n\n    let accumulator = initialValue;\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      accumulator = callback(accumulator, e, ea, s, t, sa, ta, u);\n    });\n\n    this[forEachName].apply(this, args);\n\n    return accumulator;\n  };\n}\n\n/**\n * Function attaching a breakable edge callback iterator method to the Graph\n * prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachFindEdge(Class, description) {\n  const {name, type, direction} = description;\n\n  const findEdgeName = 'find' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges in order to match\n   * one of them using the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[findEdgeName] = function (source, target, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return false;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return forEachEdge(true, this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return forEachEdgeForNode(\n        true,\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return forEachEdgeForPath(\n        true,\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target,\n        callback\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${findEdgeName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`\n    );\n  };\n\n  /**\n   * Function iterating over the graph's relevant edges in order to assert\n   * whether any one of them matches the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const someName = 'some' + name[0].toUpperCase() + name.slice(1, -1);\n\n  Class.prototype[someName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      return callback(e, ea, s, t, sa, ta, u);\n    });\n\n    const found = this[findEdgeName].apply(this, args);\n\n    if (found) return true;\n\n    return false;\n  };\n\n  /**\n   * Function iterating over the graph's relevant edges in order to assert\n   * whether all of them matche the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const everyName = 'every' + name[0].toUpperCase() + name.slice(1, -1);\n\n  Class.prototype[everyName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      return !callback(e, ea, s, t, sa, ta, u);\n    });\n\n    const found = this[findEdgeName].apply(this, args);\n\n    if (found) return false;\n\n    return true;\n  };\n}\n\n/**\n * Function attaching an edge iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeIteratorCreator(Class, description) {\n  const {name: originalName, type, direction} = description;\n\n  const name = originalName.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over the graph's edges.\n   *\n   * Arity 0: Iterate over all the relevant edges.\n   *\n   * Arity 1: Iterate over all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Iterate over the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function (source, target) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return emptyIterator();\n\n    if (!arguments.length) return createEdgeIterator(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      return createEdgeIteratorForNode(type, direction, sourceData);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return createEdgeIteratorForPath(type, direction, sourceData, target);\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`\n    );\n  };\n}\n\n/**\n * Function attaching every edge iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport default function attachEdgeIterationMethods(Graph) {\n  EDGES_ITERATION.forEach(description => {\n    attachEdgeArrayCreator(Graph, description);\n    attachForEachEdge(Graph, description);\n    attachFindEdge(Graph, description);\n    attachEdgeIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Neighbor Iteration\n * ==============================\n *\n * Attaching some methods to the Graph class to be able to iterate over\n * neighbors.\n */\nimport {chain, emptyIterator} from '../utils';\n\nimport {NotFoundGraphError, InvalidArgumentsGraphError} from '../errors';\n\n/**\n * Definitions.\n */\nconst NEIGHBORS_ITERATION = [\n  {\n    name: 'neighbors',\n    type: 'mixed'\n  },\n  {\n    name: 'inNeighbors',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outNeighbors',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundNeighbors',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundNeighbors',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedNeighbors',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedNeighbors',\n    type: 'undirected'\n  }\n];\n\n/**\n * Helpers.\n */\nfunction CompositeSetWrapper() {\n  this.A = null;\n  this.B = null;\n}\n\nCompositeSetWrapper.prototype.wrap = function (set) {\n  if (this.A === null) this.A = set;\n  else if (this.B === null) this.B = set;\n};\n\nCompositeSetWrapper.prototype.has = function (key) {\n  if (this.A !== null && key in this.A) return true;\n  if (this.B !== null && key in this.B) return true;\n  return false;\n};\n\n/**\n * Function iterating over the given node's relevant neighbors to match\n * one of them using a predicated function.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Callback to use.\n */\nfunction forEachInObjectOnce(breakable, visited, nodeData, object, callback) {\n  for (const k in object) {\n    const edgeData = object[k];\n\n    const sourceData = edgeData.source;\n    const targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited && visited.has(neighborData.key)) continue;\n\n    const shouldBreak = callback(neighborData.key, neighborData.attributes);\n\n    if (breakable && shouldBreak) return neighborData.key;\n  }\n\n  return;\n}\n\nfunction forEachNeighbor(breakable, type, direction, nodeData, callback) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return forEachInObjectOnce(\n        breakable,\n        null,\n        nodeData,\n        nodeData.undirected,\n        callback\n      );\n\n    if (typeof direction === 'string')\n      return forEachInObjectOnce(\n        breakable,\n        null,\n        nodeData,\n        nodeData[direction],\n        callback\n      );\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  // We cheat by querying the other adjacencies\n  const visited = new CompositeSetWrapper();\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      found = forEachInObjectOnce(\n        breakable,\n        null,\n        nodeData,\n        nodeData.in,\n        callback\n      );\n\n      if (breakable && found) return found;\n\n      visited.wrap(nodeData.in);\n    }\n    if (direction !== 'in') {\n      found = forEachInObjectOnce(\n        breakable,\n        visited,\n        nodeData,\n        nodeData.out,\n        callback\n      );\n\n      if (breakable && found) return found;\n\n      visited.wrap(nodeData.out);\n    }\n  }\n\n  if (type !== 'directed') {\n    found = forEachInObjectOnce(\n      breakable,\n      visited,\n      nodeData,\n      nodeData.undirected,\n      callback\n    );\n\n    if (breakable && found) return found;\n  }\n\n  return;\n}\n\n/**\n * Function creating an array of relevant neighbors for the given node.\n *\n * @param  {string}       type      - Type of neighbors.\n * @param  {string}       direction - Direction.\n * @param  {any}          nodeData  - Target node's data.\n * @return {Array}                  - The list of neighbors.\n */\nfunction createNeighborArrayForNode(type, direction, nodeData) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected') return Object.keys(nodeData.undirected);\n\n    if (typeof direction === 'string') return Object.keys(nodeData[direction]);\n  }\n\n  const neighbors = [];\n\n  forEachNeighbor(false, type, direction, nodeData, function (key) {\n    neighbors.push(key);\n  });\n\n  return neighbors;\n}\n\n/**\n * Function returning an iterator over the given node's relevant neighbors.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createDedupedObjectIterator(visited, nodeData, object) {\n  const keys = Object.keys(object);\n  const l = keys.length;\n\n  let i = 0;\n\n  return {\n    [Symbol.iterator]() {\n      return this;\n    },\n    next() {\n      let neighborData = null;\n\n      do {\n        if (i >= l) {\n          if (visited) visited.wrap(object);\n          return {done: true};\n        }\n\n        const edgeData = object[keys[i++]];\n\n        const sourceData = edgeData.source;\n        const targetData = edgeData.target;\n\n        neighborData = sourceData === nodeData ? targetData : sourceData;\n\n        if (visited && visited.has(neighborData.key)) {\n          neighborData = null;\n          continue;\n        }\n      } while (neighborData === null);\n\n      return {\n        done: false,\n        value: {neighbor: neighborData.key, attributes: neighborData.attributes}\n      };\n    }\n  };\n}\n\nfunction createNeighborIterator(type, direction, nodeData) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return createDedupedObjectIterator(null, nodeData, nodeData.undirected);\n\n    if (typeof direction === 'string')\n      return createDedupedObjectIterator(null, nodeData, nodeData[direction]);\n  }\n\n  let iterator = emptyIterator();\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  // We cheat by querying the other adjacencies\n  const visited = new CompositeSetWrapper();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      iterator = chain(\n        iterator,\n        createDedupedObjectIterator(visited, nodeData, nodeData.in)\n      );\n    }\n    if (direction !== 'in') {\n      iterator = chain(\n        iterator,\n        createDedupedObjectIterator(visited, nodeData, nodeData.out)\n      );\n    }\n  }\n\n  if (type !== 'directed') {\n    iterator = chain(\n      iterator,\n      createDedupedObjectIterator(visited, nodeData, nodeData.undirected)\n    );\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching a neighbors array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborArrayCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  /**\n   * Function returning an array of certain neighbors.\n   *\n   * @param  {any}   node   - Target node.\n   * @return {array} - The neighbors of neighbors.\n   *\n   * @throws {Error} - Will throw if node is not found in the graph.\n   */\n  Class.prototype[name] = function (node) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${name}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborArrayForNode(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachNeighbor(Class, description) {\n  const {name, type, direction} = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function (node, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${forEachName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    forEachNeighbor(\n      false,\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n\n  /**\n   * Function mapping the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const mapName = 'map' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[mapName] = function (node, callback) {\n    // TODO: optimize when size is known beforehand\n    const result = [];\n\n    this[forEachName](node, (n, a) => {\n      result.push(callback(n, a));\n    });\n\n    return result;\n  };\n\n  /**\n   * Function filtering the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[filterName] = function (node, callback) {\n    const result = [];\n\n    this[forEachName](node, (n, a) => {\n      if (callback(n, a)) result.push(n);\n    });\n\n    return result;\n  };\n\n  /**\n   * Function reducing the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[reduceName] = function (node, callback, initialValue) {\n    if (arguments.length < 3)\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`\n      );\n\n    let accumulator = initialValue;\n\n    this[forEachName](node, (n, a) => {\n      accumulator = callback(accumulator, n, a);\n    });\n\n    return accumulator;\n  };\n}\n\n/**\n * Function attaching a breakable neighbors callback iterator method to the\n * Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachFindNeighbor(Class, description) {\n  const {name, type, direction} = description;\n\n  const capitalizedSingular = name[0].toUpperCase() + name.slice(1, -1);\n\n  const findName = 'find' + capitalizedSingular;\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[findName] = function (node, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${findName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return forEachNeighbor(\n      true,\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n\n  /**\n   * Function iterating over all the relevant neighbors to find if any of them\n   * matches the given predicate.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const someName = 'some' + capitalizedSingular;\n\n  Class.prototype[someName] = function (node, callback) {\n    const found = this[findName](node, callback);\n\n    if (found) return true;\n\n    return false;\n  };\n\n  /**\n   * Function iterating over all the relevant neighbors to find if all of them\n   * matche the given predicate.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const everyName = 'every' + capitalizedSingular;\n\n  Class.prototype[everyName] = function (node, callback) {\n    const found = this[findName](node, (n, a) => {\n      return !callback(n, a);\n    });\n\n    if (found) return false;\n\n    return true;\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborIteratorCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  const iteratorName = name.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over all the relevant neighbors.\n   *\n   * @param  {any}      node     - Target node.\n   * @return {Iterator}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[iteratorName] = function (node) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return emptyIterator();\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${iteratorName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborIterator(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching every neighbor iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport default function attachNeighborIterationMethods(Graph) {\n  NEIGHBORS_ITERATION.forEach(description => {\n    attachNeighborArrayCreator(Graph, description);\n    attachForEachNeighbor(Graph, description);\n    attachFindNeighbor(Graph, description);\n    attachNeighborIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Adjacency Iteration\n * ===============================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's adjacency.\n */\n\n/**\n * Function iterating over a simple graph's adjacency using a callback.\n *\n * @param {boolean}  breakable         - Can we break?\n * @param {boolean}  assymetric        - Whether to emit undirected edges only once.\n * @param {boolean}  disconnectedNodes - Whether to emit disconnected nodes.\n * @param {Graph}    graph             - Target Graph instance.\n * @param {callback} function          - Iteration callback.\n */\nexport function forEachAdjacency(\n  breakable,\n  assymetric,\n  disconnectedNodes,\n  graph,\n  callback\n) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let step, sourceData, neighbor, adj, edgeData, targetData, shouldBreak;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    let hasEdges = false;\n\n    sourceData = step.value;\n\n    if (type !== 'undirected') {\n      adj = sourceData.out;\n\n      for (neighbor in adj) {\n        edgeData = adj[neighbor];\n\n        do {\n          targetData = edgeData.target;\n\n          hasEdges = true;\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected\n          );\n\n          if (breakable && shouldBreak) return edgeData;\n\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    if (type !== 'directed') {\n      adj = sourceData.undirected;\n\n      for (neighbor in adj) {\n        if (assymetric && sourceData.key > neighbor) continue;\n\n        edgeData = adj[neighbor];\n\n        do {\n          targetData = edgeData.target;\n\n          if (targetData.key !== neighbor) targetData = edgeData.source;\n\n          hasEdges = true;\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected\n          );\n\n          if (breakable && shouldBreak) return edgeData;\n\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    if (disconnectedNodes && !hasEdges) {\n      shouldBreak = callback(\n        sourceData.key,\n        null,\n        sourceData.attributes,\n        null,\n        null,\n        null,\n        null\n      );\n\n      if (breakable && shouldBreak) return null;\n    }\n  }\n\n  return;\n}\n","/**\n * Graphology Serialization Utilities\n * ===================================\n *\n * Collection of functions used by the graph serialization schemes.\n */\nimport {InvalidArgumentsGraphError} from './errors';\nimport {assign, isPlainObject, isEmpty} from './utils';\n\n/**\n * Formats internal node data into a serialized node.\n *\n * @param  {any}    key  - The node's key.\n * @param  {object} data - Internal node's data.\n * @return {array}       - The serialized node.\n */\nexport function serializeNode(key, data) {\n  const serialized = {key};\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  return serialized;\n}\n\n/**\n * Formats internal edge data into a serialized edge.\n *\n * @param  {string} type - The graph's type.\n * @param  {any}    key  - The edge's key.\n * @param  {object} data - Internal edge's data.\n * @return {array}       - The serialized edge.\n */\nexport function serializeEdge(type, key, data) {\n  const serialized = {\n    key,\n    source: data.source.key,\n    target: data.target.key\n  };\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  if (type === 'mixed' && data.undirected) serialized.undirected = true;\n\n  return serialized;\n}\n\n/**\n * Checks whether the given value is a serialized node.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedNode(value) {\n  if (!isPlainObject(value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid serialized node. A serialized node should be a plain object with at least a \"key\" property.'\n    );\n\n  if (!('key' in value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: serialized node is missing its key.'\n    );\n\n  if (\n    'attributes' in value &&\n    (!isPlainObject(value.attributes) || value.attributes === null)\n  )\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.'\n    );\n}\n\n/**\n * Checks whether the given value is a serialized edge.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedEdge(value) {\n  if (!isPlainObject(value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a \"source\" & \"target\" property.'\n    );\n\n  if (!('source' in value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: serialized edge is missing its source.'\n    );\n\n  if (!('target' in value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: serialized edge is missing its target.'\n    );\n\n  if (\n    'attributes' in value &&\n    (!isPlainObject(value.attributes) || value.attributes === null)\n  )\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.'\n    );\n\n  if ('undirected' in value && typeof value.undirected !== 'boolean')\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.'\n    );\n}\n","/* eslint no-nested-ternary: 0 */\n/**\n * Graphology Reference Implementation\n * ====================================\n *\n * Reference implementation of the graphology specs.\n */\nimport {EventEmitter} from 'events';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\nimport {\n  MixedNodeData,\n  DirectedNodeData,\n  UndirectedNodeData,\n  EdgeData\n} from './data';\n\nimport attachNodeAttributesMethods from './attributes/nodes';\nimport attachEdgeAttributesMethods from './attributes/edges';\nimport attachEdgeIterationMethods from './iteration/edges';\nimport attachNeighborIterationMethods from './iteration/neighbors';\nimport {forEachAdjacency} from './iteration/adjacency';\n\nimport {\n  serializeNode,\n  serializeEdge,\n  validateSerializedNode,\n  validateSerializedEdge\n} from './serialization';\n\nimport {\n  assign,\n  getMatchingEdge,\n  isPlainObject,\n  privateProperty,\n  readOnlyProperty,\n  incrementalIdStartingFromRandomByte,\n  validateHints\n} from './utils';\n\n/**\n * Constants.\n */\nconst INSTANCE_ID = incrementalIdStartingFromRandomByte();\n\n/**\n * Enums.\n */\nconst TYPES = new Set(['directed', 'undirected', 'mixed']);\n\nconst EMITTER_PROPS = new Set([\n  'domain',\n  '_events',\n  '_eventsCount',\n  '_maxListeners'\n]);\n\nconst EDGE_ADD_METHODS = [\n  {\n    name: verb => `${verb}Edge`,\n    generateKey: true\n  },\n  {\n    name: verb => `${verb}DirectedEdge`,\n    generateKey: true,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdge`,\n    generateKey: true,\n    type: 'undirected'\n  },\n  {\n    name: verb => `${verb}EdgeWithKey`\n  },\n  {\n    name: verb => `${verb}DirectedEdgeWithKey`,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdgeWithKey`,\n    type: 'undirected'\n  }\n];\n\n/**\n * Default options.\n */\nconst DEFAULTS = {\n  allowSelfLoops: true,\n  multi: false,\n  type: 'mixed'\n};\n\n/**\n * Abstract functions used by the Graph class for various methods.\n */\n\n/**\n * Internal method used to add a node to the given graph\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {any}     node            - The node's key.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {NodeData}                - Created node data.\n */\nfunction addNode(graph, node, attributes) {\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(\n      `Graph.addNode: invalid attributes. Expecting an object but got \"${attributes}\"`\n    );\n\n  // String coercion\n  node = '' + node;\n  attributes = attributes || {};\n\n  if (graph._nodes.has(node))\n    throw new UsageGraphError(\n      `Graph.addNode: the \"${node}\" node already exist in the graph.`\n    );\n\n  const data = new graph.NodeDataClass(node, attributes);\n\n  // Adding the node to internal register\n  graph._nodes.set(node, data);\n\n  // Emitting\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Same as the above but without sanity checks because we call this in contexts\n * where necessary checks were already done.\n */\nfunction unsafeAddNode(graph, node, attributes) {\n  const data = new graph.NodeDataClass(node, attributes);\n\n  graph._nodes.set(node, data);\n\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction addEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes\n) {\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead.`\n    );\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead.`\n    );\n\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`\n    );\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n  attributes = attributes || {};\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(\n      `Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`\n    );\n\n  const sourceData = graph._nodes.get(source),\n    targetData = graph._nodes.get(target);\n\n  if (!sourceData)\n    throw new NotFoundGraphError(\n      `Graph.${name}: source node \"${source}\" not found.`\n    );\n\n  if (!targetData)\n    throw new NotFoundGraphError(\n      `Graph.${name}: target node \"${target}\" not found.`\n    );\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey) {\n    // NOTE: in this case we can guarantee that the key does not already\n    // exist and is already correctly casted as a string\n    edge = graph._edgeKeyGenerator();\n  } else {\n    // Coercion of edge key\n    edge = '' + edge;\n\n    // Here, we have a key collision\n    if (graph._edges.has(edge))\n      throw new UsageGraphError(\n        `Graph.${name}: the \"${edge}\" edge already exists in the graph.`\n      );\n  }\n\n  // Here, we might have a source / target collision\n  if (\n    !graph.multi &&\n    (undirected\n      ? typeof sourceData.undirected[target] !== 'undefined'\n      : typeof sourceData.out[target] !== 'undefined')\n  ) {\n    throw new UsageGraphError(\n      `Graph.${name}: an edge linking \"${source}\" to \"${target}\" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.`\n    );\n  }\n\n  // Storing some data\n  const edgeData = new EdgeData(\n    undirected,\n    edge,\n    sourceData,\n    targetData,\n    attributes\n  );\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  const isSelfLoop = source === target;\n\n  if (undirected) {\n    sourceData.undirectedDegree++;\n    targetData.undirectedDegree++;\n\n    if (isSelfLoop) {\n      sourceData.undirectedLoops++;\n      graph._undirectedSelfLoopCount++;\n    }\n  } else {\n    sourceData.outDegree++;\n    targetData.inDegree++;\n\n    if (isSelfLoop) {\n      sourceData.directedLoops++;\n      graph._directedSelfLoopCount++;\n    }\n  }\n\n  // Updating relevant index\n  if (graph.multi) edgeData.attachMulti();\n  else edgeData.attach();\n\n  if (undirected) graph._undirectedSize++;\n  else graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return edge;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @param  {boolean} [asUpdater]       - Are we updating or merging?\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction mergeEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes,\n  asUpdater\n) {\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead.`\n    );\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead.`\n    );\n\n  if (attributes) {\n    if (asUpdater) {\n      if (typeof attributes !== 'function')\n        throw new InvalidArgumentsGraphError(\n          `Graph.${name}: invalid updater function. Expecting a function but got \"${attributes}\"`\n        );\n    } else {\n      if (!isPlainObject(attributes))\n        throw new InvalidArgumentsGraphError(\n          `Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`\n        );\n    }\n  }\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n\n  let updater;\n\n  if (asUpdater) {\n    updater = attributes;\n    attributes = undefined;\n  }\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(\n      `Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`\n    );\n\n  let sourceData = graph._nodes.get(source);\n  let targetData = graph._nodes.get(target);\n  let edgeData;\n\n  // Do we need to handle duplicate?\n  let alreadyExistingEdgeData;\n\n  if (!mustGenerateKey) {\n    edgeData = graph._edges.get(edge);\n\n    if (edgeData) {\n      // Here, we need to ensure, if the user gave a key, that source & target\n      // are consistent\n      if (edgeData.source.key !== source || edgeData.target.key !== target) {\n        // If source or target inconsistent\n        if (\n          !undirected ||\n          edgeData.source.key !== target ||\n          edgeData.target.key !== source\n        ) {\n          // If directed, or source/target aren't flipped\n          throw new UsageGraphError(\n            `Graph.${name}: inconsistency detected when attempting to merge the \"${edge}\" edge with \"${source}\" source & \"${target}\" target vs. (\"${edgeData.source.key}\", \"${edgeData.target.key}\").`\n          );\n        }\n      }\n\n      alreadyExistingEdgeData = edgeData;\n    }\n  }\n\n  // Here, we might have a source / target collision\n  if (!alreadyExistingEdgeData && !graph.multi && sourceData) {\n    alreadyExistingEdgeData = undirected\n      ? sourceData.undirected[target]\n      : sourceData.out[target];\n  }\n\n  // Handling duplicates\n  if (alreadyExistingEdgeData) {\n    const info = [alreadyExistingEdgeData.key, false, false, false];\n\n    // We can skip the attribute merging part if the user did not provide them\n    if (asUpdater ? !updater : !attributes) return info;\n\n    // Updating the attributes\n    if (asUpdater) {\n      const oldAttributes = alreadyExistingEdgeData.attributes;\n      alreadyExistingEdgeData.attributes = updater(oldAttributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'replace',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes\n      });\n    }\n\n    // Merging the attributes\n    else {\n      assign(alreadyExistingEdgeData.attributes, attributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'merge',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes,\n        data: attributes\n      });\n    }\n\n    return info;\n  }\n\n  attributes = attributes || {};\n\n  if (asUpdater && updater) attributes = updater(attributes);\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey) {\n    // NOTE: in this case we can guarantee that the key does not already\n    // exist and is already correctly casted as a string\n    edge = graph._edgeKeyGenerator();\n  } else {\n    // Coercion of edge key\n    edge = '' + edge;\n\n    // Here, we have a key collision\n    if (graph._edges.has(edge))\n      throw new UsageGraphError(\n        `Graph.${name}: the \"${edge}\" edge already exists in the graph.`\n      );\n  }\n\n  let sourceWasAdded = false;\n  let targetWasAdded = false;\n\n  if (!sourceData) {\n    sourceData = unsafeAddNode(graph, source, {});\n    sourceWasAdded = true;\n\n    if (source === target) {\n      targetData = sourceData;\n      targetWasAdded = true;\n    }\n  }\n  if (!targetData) {\n    targetData = unsafeAddNode(graph, target, {});\n    targetWasAdded = true;\n  }\n\n  // Storing some data\n  edgeData = new EdgeData(undirected, edge, sourceData, targetData, attributes);\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  const isSelfLoop = source === target;\n\n  if (undirected) {\n    sourceData.undirectedDegree++;\n    targetData.undirectedDegree++;\n\n    if (isSelfLoop) {\n      sourceData.undirectedLoops++;\n      graph._undirectedSelfLoopCount++;\n    }\n  } else {\n    sourceData.outDegree++;\n    targetData.inDegree++;\n\n    if (isSelfLoop) {\n      sourceData.directedLoops++;\n      graph._directedSelfLoopCount++;\n    }\n  }\n\n  // Updating relevant index\n  if (graph.multi) edgeData.attachMulti();\n  else edgeData.attach();\n\n  if (undirected) graph._undirectedSize++;\n  else graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return [edge, true, sourceWasAdded, targetWasAdded];\n}\n\n/**\n * Internal method used to drop an edge.\n *\n * @param  {Graph}    graph    - Target graph.\n * @param  {EdgeData} edgeData - Data of the edge to drop.\n */\nfunction dropEdgeFromData(graph, edgeData) {\n  // Dropping the edge from the register\n  graph._edges.delete(edgeData.key);\n\n  // Updating related degrees\n  const {source: sourceData, target: targetData, attributes} = edgeData;\n\n  const undirected = edgeData.undirected;\n\n  const isSelfLoop = sourceData === targetData;\n\n  if (undirected) {\n    sourceData.undirectedDegree--;\n    targetData.undirectedDegree--;\n\n    if (isSelfLoop) {\n      sourceData.undirectedLoops--;\n      graph._undirectedSelfLoopCount--;\n    }\n  } else {\n    sourceData.outDegree--;\n    targetData.inDegree--;\n\n    if (isSelfLoop) {\n      sourceData.directedLoops--;\n      graph._directedSelfLoopCount--;\n    }\n  }\n\n  // Clearing index\n  if (graph.multi) edgeData.detachMulti();\n  else edgeData.detach();\n\n  if (undirected) graph._undirectedSize--;\n  else graph._directedSize--;\n\n  // Emitting\n  graph.emit('edgeDropped', {\n    key: edgeData.key,\n    attributes,\n    source: sourceData.key,\n    target: targetData.key,\n    undirected\n  });\n}\n\n/**\n * Graph class\n *\n * @constructor\n * @param  {object}  [options] - Options:\n * @param  {boolean}   [allowSelfLoops] - Allow self loops?\n * @param  {string}    [type]           - Type of the graph.\n * @param  {boolean}   [map]            - Allow references as keys?\n * @param  {boolean}   [multi]          - Allow parallel edges?\n *\n * @throws {Error} - Will throw if the arguments are not valid.\n */\nexport default class Graph extends EventEmitter {\n  constructor(options) {\n    super();\n\n    //-- Solving options\n    options = assign({}, DEFAULTS, options);\n\n    // Enforcing options validity\n    if (typeof options.multi !== 'boolean')\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'multi' option. Expecting a boolean but got \"${options.multi}\".`\n      );\n\n    if (!TYPES.has(options.type))\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'type' option. Should be one of \"mixed\", \"directed\" or \"undirected\" but got \"${options.type}\".`\n      );\n\n    if (typeof options.allowSelfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got \"${options.allowSelfLoops}\".`\n      );\n\n    //-- Private properties\n\n    // Utilities\n    const NodeDataClass =\n      options.type === 'mixed'\n        ? MixedNodeData\n        : options.type === 'directed'\n        ? DirectedNodeData\n        : UndirectedNodeData;\n\n    privateProperty(this, 'NodeDataClass', NodeDataClass);\n\n    // Internal edge key generator\n\n    // NOTE: this internal generator produce keys that are strings\n    // composed of a weird prefix, an incremental instance id starting from\n    // a random byte and finally an internal instance incremental id.\n    // All this to avoid intra-frame and cross-frame adversarial inputs\n    // that can force a single #.addEdge call to degenerate into a O(n)\n    // available key search loop.\n\n    // It also ensures that automatically generated edge keys are unlikely\n    // to produce collisions with arbitrary keys given by users.\n    const instancePrefix = 'geid_' + INSTANCE_ID() + '_';\n    let edgeId = 0;\n\n    const edgeKeyGenerator = () => {\n      let availableEdgeKey;\n\n      do {\n        availableEdgeKey = instancePrefix + edgeId++;\n      } while (this._edges.has(availableEdgeKey));\n\n      return availableEdgeKey;\n    };\n\n    // Indexes\n    privateProperty(this, '_attributes', {});\n    privateProperty(this, '_nodes', new Map());\n    privateProperty(this, '_edges', new Map());\n    privateProperty(this, '_directedSize', 0);\n    privateProperty(this, '_undirectedSize', 0);\n    privateProperty(this, '_directedSelfLoopCount', 0);\n    privateProperty(this, '_undirectedSelfLoopCount', 0);\n    privateProperty(this, '_edgeKeyGenerator', edgeKeyGenerator);\n\n    // Options\n    privateProperty(this, '_options', options);\n\n    // Emitter properties\n    EMITTER_PROPS.forEach(prop => privateProperty(this, prop, this[prop]));\n\n    //-- Properties readers\n    readOnlyProperty(this, 'order', () => this._nodes.size);\n    readOnlyProperty(this, 'size', () => this._edges.size);\n    readOnlyProperty(this, 'directedSize', () => this._directedSize);\n    readOnlyProperty(this, 'undirectedSize', () => this._undirectedSize);\n    readOnlyProperty(\n      this,\n      'selfLoopCount',\n      () => this._directedSelfLoopCount + this._undirectedSelfLoopCount\n    );\n    readOnlyProperty(\n      this,\n      'directedSelfLoopCount',\n      () => this._directedSelfLoopCount\n    );\n    readOnlyProperty(\n      this,\n      'undirectedSelfLoopCount',\n      () => this._undirectedSelfLoopCount\n    );\n    readOnlyProperty(this, 'multi', this._options.multi);\n    readOnlyProperty(this, 'type', this._options.type);\n    readOnlyProperty(this, 'allowSelfLoops', this._options.allowSelfLoops);\n    readOnlyProperty(this, 'implementation', () => 'graphology');\n  }\n\n  _resetInstanceCounters() {\n    this._directedSize = 0;\n    this._undirectedSize = 0;\n    this._directedSelfLoopCount = 0;\n    this._undirectedSelfLoopCount = 0;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Read\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning whether the given node is found in the graph.\n   *\n   * @param  {any}     node - The node.\n   * @return {boolean}\n   */\n  hasNode(node) {\n    return this._nodes.has('' + node);\n  }\n\n  /**\n   * Method returning whether the given directed edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasDirectedEdge(source, target) {\n    // Early termination\n    if (this.type === 'undirected') return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return !!edgeData && !edgeData.undirected;\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      return nodeData.out.hasOwnProperty(target);\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning whether the given undirected edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasUndirectedEdge(source, target) {\n    // Early termination\n    if (this.type === 'directed') return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return !!edgeData && edgeData.undirected;\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      return nodeData.undirected.hasOwnProperty(target);\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning whether the given edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasEdge(source, target) {\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      return this._edges.has(edge);\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      return (\n        (typeof nodeData.out !== 'undefined' &&\n          nodeData.out.hasOwnProperty(target)) ||\n        (typeof nodeData.undirected !== 'undefined' &&\n          nodeData.undirected.hasOwnProperty(target))\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning the edge matching source & target in a directed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  directedEdge(source, target) {\n    if (this.type === 'undirected') return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.'\n      );\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.directedEdge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.directedEdge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData = (sourceData.out && sourceData.out[target]) || undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a undirected fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  undirectedEdge(source, target) {\n    if (this.type === 'directed') return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.'\n      );\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedEdge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.undirectedEdge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData =\n      (sourceData.undirected && sourceData.undirected[target]) || undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a mixed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  edge(source, target) {\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.'\n      );\n\n    source = '' + source;\n    target = '' + target;\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.edge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.edge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData =\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]) ||\n      undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning whether two nodes are directed neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areDirectedNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areDirectedNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.in || neighbor in nodeData.out;\n  }\n\n  /**\n   * Method returning whether two nodes are out neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areOutNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areOutNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.out;\n  }\n\n  /**\n   * Method returning whether two nodes are in neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areInNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areInNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.in;\n  }\n\n  /**\n   * Method returning whether two nodes are undirected neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areUndirectedNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areUndirectedNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return false;\n\n    return neighbor in nodeData.undirected;\n  }\n\n  /**\n   * Method returning whether two nodes are neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.in || neighbor in nodeData.out) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether two nodes are inbound neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areInboundNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areInboundNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.in) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether two nodes are outbound neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areOutboundNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areOutboundNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.out) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning the given node's in degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree;\n  }\n\n  /**\n   * Method returning the given node's out degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.outDegree;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.directedDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree + nodeData.outDegree;\n  }\n\n  /**\n   * Method returning the given node's undirected degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return 0;\n\n    return nodeData.undirectedDegree;\n  }\n\n  /**\n   * Method returning the given node's inbound degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's inbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inboundDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inboundDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's outbound degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's outbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outboundDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outboundDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.outDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.degree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree + nodeData.outDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's in degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree - nodeData.directedLoops;\n  }\n\n  /**\n   * Method returning the given node's out degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.outDegree - nodeData.directedLoops;\n  }\n\n  /**\n   * Method returning the given node's directed degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.directedDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree + nodeData.outDegree - nodeData.directedLoops * 2;\n  }\n\n  /**\n   * Method returning the given node's undirected degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return 0;\n\n    return nodeData.undirectedDegree - nodeData.undirectedLoops * 2;\n  }\n\n  /**\n   * Method returning the given node's inbound degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's inbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inboundDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inboundDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n      loops += nodeData.undirectedLoops * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree;\n      loops += nodeData.directedLoops;\n    }\n\n    return degree - loops;\n  }\n\n  /**\n   * Method returning the given node's outbound degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's outbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outboundDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outboundDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n      loops += nodeData.undirectedLoops * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.outDegree;\n      loops += nodeData.directedLoops;\n    }\n\n    return degree - loops;\n  }\n\n  /**\n   * Method returning the given node's directed degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.degreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n      loops += nodeData.undirectedLoops * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree + nodeData.outDegree;\n      loops += nodeData.directedLoops * 2;\n    }\n\n    return degree - loops;\n  }\n\n  /**\n   * Method returning the given edge's source.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's source.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  source(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.source: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source.key;\n  }\n\n  /**\n   * Method returning the given edge's target.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's target.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  target(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.target: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.target.key;\n  }\n\n  /**\n   * Method returning the given edge's extremities.\n   *\n   * @param  {any}   edge - The edge's key.\n   * @return {array}      - The edge's extremities.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  extremities(edge) {\n    edge = '' + edge;\n\n    const edgeData = this._edges.get(edge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.extremities: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return [edgeData.source.key, edgeData.target.key];\n  }\n\n  /**\n   * Given a node & an edge, returns the other extremity of the edge.\n   *\n   * @param  {any}   node - The node's key.\n   * @param  {any}   edge - The edge's key.\n   * @return {any}        - The related node.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph or if the\n   *                   edge & node are not related.\n   */\n  opposite(node, edge) {\n    node = '' + node;\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.opposite: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    const source = data.source.key;\n    const target = data.target.key;\n\n    if (node === source) return target;\n    if (node === target) return source;\n\n    throw new NotFoundGraphError(\n      `Graph.opposite: the \"${node}\" node is not attached to the \"${edge}\" edge (${source}, ${target}).`\n    );\n  }\n\n  /**\n   * Returns whether the given edge has the given node as extremity.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @param  {any}     node - The node's key.\n   * @return {boolean}      - The related node.\n   *\n   * @throws {Error} - Will throw if either the node or the edge isn't in the graph.\n   */\n  hasExtremity(edge, node) {\n    edge = '' + edge;\n    node = '' + node;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.hasExtremity: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source.key === node || data.target.key === node;\n  }\n\n  /**\n   * Method returning whether the given edge is undirected.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isUndirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isUndirected: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is directed.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isDirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isDirected: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return !data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is a self loop.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isSelfLoop(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isSelfLoop: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source === data.target;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Mutation\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used to add a node to the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   *\n   * @throws {Error} - Will throw if the given node already exist.\n   * @throws {Error} - Will throw if the given attributes are not an object.\n   */\n  addNode(node, attributes) {\n    const nodeData = addNode(this, node, attributes);\n\n    return nodeData.key;\n  }\n\n  /**\n   * Method used to merge a node into the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   */\n  mergeNode(node, attributes) {\n    if (attributes && !isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.mergeNode: invalid attributes. Expecting an object but got \"${attributes}\"`\n      );\n\n    // String coercion\n    node = '' + node;\n    attributes = attributes || {};\n\n    // If the node already exists, we merge the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (attributes) {\n        assign(data.attributes, attributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'merge',\n          key: node,\n          attributes: data.attributes,\n          data: attributes\n        });\n      }\n      return [node, false];\n    }\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return [node, true];\n  }\n\n  /**\n   * Method used to add a node if it does not exist in the graph or else to\n   * update its attributes using a function.\n   *\n   * @param  {any}      node      - The node.\n   * @param  {function} [updater] - Optional updater function.\n   * @return {any}                - The node.\n   */\n  updateNode(node, updater) {\n    if (updater && typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.updateNode: invalid updater function. Expecting a function but got \"${updater}\"`\n      );\n\n    // String coercion\n    node = '' + node;\n\n    // If the node already exists, we update the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (updater) {\n        const oldAttributes = data.attributes;\n        data.attributes = updater(oldAttributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'replace',\n          key: node,\n          attributes: data.attributes\n        });\n      }\n      return [node, false];\n    }\n\n    const attributes = updater ? updater({}) : {};\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return [node, true];\n  }\n\n  /**\n   * Method used to drop a single node & all its attached edges from the graph.\n   *\n   * @param  {any}    node - The node.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node doesn't exist.\n   */\n  dropNode(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.dropNode: could not find the \"${node}\" node in the graph.`\n      );\n\n    let edgeData;\n\n    // Removing attached edges\n    // NOTE: we could be faster here, but this is such a pain to maintain\n    if (this.type !== 'undirected') {\n      for (const neighbor in nodeData.out) {\n        edgeData = nodeData.out[neighbor];\n\n        do {\n          dropEdgeFromData(this, edgeData);\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n\n      for (const neighbor in nodeData.in) {\n        edgeData = nodeData.in[neighbor];\n\n        do {\n          dropEdgeFromData(this, edgeData);\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    if (this.type !== 'directed') {\n      for (const neighbor in nodeData.undirected) {\n        edgeData = nodeData.undirected[neighbor];\n\n        do {\n          dropEdgeFromData(this, edgeData);\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    // Dropping the node from the register\n    this._nodes.delete(node);\n\n    // Emitting\n    this.emit('nodeDropped', {\n      key: node,\n      attributes: nodeData.attributes\n    });\n  }\n\n  /**\n   * Method used to drop a single edge from the graph.\n   *\n   * Arity 1:\n   * @param  {any}    edge - The edge.\n   *\n   * Arity 2:\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropEdge(edge) {\n    let edgeData;\n\n    if (arguments.length > 1) {\n      const source = '' + arguments[0];\n      const target = '' + arguments[1];\n\n      edgeData = getMatchingEdge(this, source, target, this.type);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(\n          `Graph.dropEdge: could not find the \"${source}\" -> \"${target}\" edge in the graph.`\n        );\n    } else {\n      edge = '' + edge;\n\n      edgeData = this._edges.get(edge);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(\n          `Graph.dropEdge: could not find the \"${edge}\" edge in the graph.`\n        );\n    }\n\n    dropEdgeFromData(this, edgeData);\n\n    return this;\n  }\n\n  /**\n   * Method used to drop a single directed edge from the graph.\n   *\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropDirectedEdge(source, target) {\n    if (arguments.length < 2)\n      throw new UsageGraphError(\n        'Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.'\n      );\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.'\n      );\n\n    source = '' + source;\n    target = '' + target;\n\n    const edgeData = getMatchingEdge(this, source, target, 'directed');\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.dropDirectedEdge: could not find a \"${source}\" -> \"${target}\" edge in the graph.`\n      );\n\n    dropEdgeFromData(this, edgeData);\n\n    return this;\n  }\n\n  /**\n   * Method used to drop a single undirected edge from the graph.\n   *\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropUndirectedEdge(source, target) {\n    if (arguments.length < 2)\n      throw new UsageGraphError(\n        'Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.'\n      );\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.'\n      );\n\n    const edgeData = getMatchingEdge(this, source, target, 'undirected');\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.dropUndirectedEdge: could not find a \"${source}\" -> \"${target}\" edge in the graph.`\n      );\n\n    dropEdgeFromData(this, edgeData);\n\n    return this;\n  }\n\n  /**\n   * Method used to remove every edge & every node from the graph.\n   *\n   * @return {Graph}\n   */\n  clear() {\n    // Clearing edges\n    this._edges.clear();\n\n    // Clearing nodes\n    this._nodes.clear();\n\n    // Reset counters\n    this._resetInstanceCounters();\n\n    // Emitting\n    this.emit('cleared');\n  }\n\n  /**\n   * Method used to remove every edge from the graph.\n   *\n   * @return {Graph}\n   */\n  clearEdges() {\n    // Clearing structure index\n    const iterator = this._nodes.values();\n\n    let step;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      step.value.clear();\n    }\n\n    // Clearing edges\n    this._edges.clear();\n\n    // Reset counters\n    this._resetInstanceCounters();\n\n    // Emitting\n    this.emit('edgesCleared');\n  }\n\n  /**---------------------------------------------------------------------------\n   * Attributes-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning the desired graph's attribute.\n   *\n   * @param  {string} name - Name of the attribute.\n   * @return {any}\n   */\n  getAttribute(name) {\n    return this._attributes[name];\n  }\n\n  /**\n   * Method returning the graph's attributes.\n   *\n   * @return {object}\n   */\n  getAttributes() {\n    return this._attributes;\n  }\n\n  /**\n   * Method returning whether the graph has the desired attribute.\n   *\n   * @param  {string}  name - Name of the attribute.\n   * @return {boolean}\n   */\n  hasAttribute(name) {\n    return this._attributes.hasOwnProperty(name);\n  }\n\n  /**\n   * Method setting a value for the desired graph's attribute.\n   *\n   * @param  {string}  name  - Name of the attribute.\n   * @param  {any}     value - Value for the attribute.\n   * @return {Graph}\n   */\n  setAttribute(name, value) {\n    this._attributes[name] = value;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method using a function to update the desired graph's attribute's value.\n   *\n   * @param  {string}   name    - Name of the attribute.\n   * @param  {function} updater - Function use to update the attribute's value.\n   * @return {Graph}\n   */\n  updateAttribute(name, updater) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateAttribute: updater should be a function.'\n      );\n\n    const value = this._attributes[name];\n\n    this._attributes[name] = updater(value);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method removing the desired graph's attribute.\n   *\n   * @param  {string} name  - Name of the attribute.\n   * @return {Graph}\n   */\n  removeAttribute(name) {\n    delete this._attributes[name];\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'remove',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method replacing the graph's attributes.\n   *\n   * @param  {object} attributes - New attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  replaceAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.replaceAttributes: provided attributes are not a plain object.'\n      );\n\n    this._attributes = attributes;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'replace',\n      attributes: this._attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method merging the graph's attributes.\n   *\n   * @param  {object} attributes - Attributes to merge.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  mergeAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.mergeAttributes: provided attributes are not a plain object.'\n      );\n\n    assign(this._attributes, attributes);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'merge',\n      attributes: this._attributes,\n      data: attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method updating the graph's attributes.\n   *\n   * @param  {function} updater - Function used to update the attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given updater is not a function.\n   */\n  updateAttributes(updater) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateAttributes: provided updater is not a function.'\n      );\n\n    this._attributes = updater(this._attributes);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'update',\n      attributes: this._attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method used to update each node's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachNodeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachNodeAttributes: expecting an updater function.'\n      );\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      nodeData.attributes = updater(nodeData.key, nodeData.attributes);\n    }\n\n    this.emit('eachNodeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**\n   * Method used to update each edge's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachEdgeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachEdgeAttributes: expecting an updater function.'\n      );\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'\n      );\n\n    const iterator = this._edges.values();\n\n    let step, edgeData, sourceData, targetData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      edgeData = step.value;\n      sourceData = edgeData.source;\n      targetData = edgeData.target;\n\n      edgeData.attributes = updater(\n        edgeData.key,\n        edgeData.attributes,\n        sourceData.key,\n        targetData.key,\n        sourceData.attributes,\n        targetData.attributes,\n        edgeData.undirected\n      );\n    }\n\n    this.emit('eachEdgeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Iteration-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method iterating over the graph's adjacency using the given callback.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  forEachAdjacencyEntry(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAdjacencyEntry: expecting a callback.'\n      );\n\n    forEachAdjacency(false, false, false, this, callback);\n  }\n  forEachAdjacencyEntryWithOrphans(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.'\n      );\n\n    forEachAdjacency(false, false, true, this, callback);\n  }\n\n  /**\n   * Method iterating over the graph's assymetric adjacency using the given callback.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  forEachAssymetricAdjacencyEntry(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAssymetricAdjacencyEntry: expecting a callback.'\n      );\n\n    forEachAdjacency(false, true, false, this, callback);\n  }\n  forEachAssymetricAdjacencyEntryWithOrphans(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.'\n      );\n\n    forEachAdjacency(false, true, true, this, callback);\n  }\n\n  /**\n   * Method returning the list of the graph's nodes.\n   *\n   * @return {array} - The nodes.\n   */\n  nodes() {\n    return Array.from(this._nodes.keys());\n  }\n\n  /**\n   * Method iterating over the graph's nodes using the given callback.\n   *\n   * @param  {function}  callback - Callback (key, attributes, index).\n   */\n  forEachNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      callback(nodeData.key, nodeData.attributes);\n    }\n  }\n\n  /**\n   * Method iterating attempting to find a node matching the given predicate\n   * function.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  findNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.findNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes)) return nodeData.key;\n    }\n\n    return;\n  }\n\n  /**\n   * Method mapping nodes.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  mapNodes(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.mapNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    const result = new Array(this.order);\n    let i = 0;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      result[i++] = callback(nodeData.key, nodeData.attributes);\n    }\n\n    return result;\n  }\n\n  /**\n   * Method returning whether some node verify the given predicate.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  someNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.someNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes)) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether all node verify the given predicate.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  everyNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.everyNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (!callback(nodeData.key, nodeData.attributes)) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Method filtering nodes.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  filterNodes(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.filterNodes: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    const result = [];\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes))\n        result.push(nodeData.key);\n    }\n\n    return result;\n  }\n\n  /**\n   * Method reducing nodes.\n   *\n   * @param  {function}  callback - Callback (accumulator, key, attributes).\n   */\n  reduceNodes(callback, initialValue) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.reduceNodes: expecting a callback.'\n      );\n\n    if (arguments.length < 2)\n      throw new InvalidArgumentsGraphError(\n        'Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.'\n      );\n\n    let accumulator = initialValue;\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      accumulator = callback(accumulator, nodeData.key, nodeData.attributes);\n    }\n\n    return accumulator;\n  }\n\n  /**\n   * Method returning an iterator over the graph's node entries.\n   *\n   * @return {Iterator}\n   */\n  nodeEntries() {\n    const iterator = this._nodes.values();\n\n    return {\n      [Symbol.iterator]() {\n        return this;\n      },\n      next() {\n        const step = iterator.next();\n        if (step.done) return step;\n        const data = step.value;\n        return {\n          value: {node: data.key, attributes: data.attributes},\n          done: false\n        };\n      }\n    };\n  }\n\n  /**---------------------------------------------------------------------------\n   * Serialization\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used to export the whole graph.\n   *\n   * @return {object} - The serialized graph.\n   */\n  export() {\n    const nodes = new Array(this._nodes.size);\n\n    let i = 0;\n\n    this._nodes.forEach((data, key) => {\n      nodes[i++] = serializeNode(key, data);\n    });\n\n    const edges = new Array(this._edges.size);\n\n    i = 0;\n\n    this._edges.forEach((data, key) => {\n      edges[i++] = serializeEdge(this.type, key, data);\n    });\n\n    return {\n      options: {\n        type: this.type,\n        multi: this.multi,\n        allowSelfLoops: this.allowSelfLoops\n      },\n      attributes: this.getAttributes(),\n      nodes,\n      edges\n    };\n  }\n\n  /**\n   * Method used to import a serialized graph.\n   *\n   * @param  {object|Graph} data  - The serialized graph.\n   * @param  {boolean}      merge - Whether to merge data.\n   * @return {Graph}              - Returns itself for chaining.\n   */\n  import(data, merge = false) {\n    // Importing a Graph instance directly\n    if (data instanceof Graph) {\n      // Nodes\n      data.forEachNode((n, a) => {\n        if (merge) this.mergeNode(n, a);\n        else this.addNode(n, a);\n      });\n\n      // Edges\n      data.forEachEdge((e, a, s, t, _sa, _ta, u) => {\n        if (merge) {\n          if (u) this.mergeUndirectedEdgeWithKey(e, s, t, a);\n          else this.mergeDirectedEdgeWithKey(e, s, t, a);\n        } else {\n          if (u) this.addUndirectedEdgeWithKey(e, s, t, a);\n          else this.addDirectedEdgeWithKey(e, s, t, a);\n        }\n      });\n\n      return this;\n    }\n\n    // Importing a serialized graph\n    if (!isPlainObject(data))\n      throw new InvalidArgumentsGraphError(\n        'Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.'\n      );\n\n    if (data.attributes) {\n      if (!isPlainObject(data.attributes))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid attributes. Expecting a plain object.'\n        );\n\n      if (merge) this.mergeAttributes(data.attributes);\n      else this.replaceAttributes(data.attributes);\n    }\n\n    let i, l, list, node, edge;\n\n    if (data.nodes) {\n      list = data.nodes;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid nodes. Expecting an array.'\n        );\n\n      for (i = 0, l = list.length; i < l; i++) {\n        node = list[i];\n\n        // Validating\n        validateSerializedNode(node);\n\n        // Adding the node\n        const {key, attributes} = node;\n\n        if (merge) this.mergeNode(key, attributes);\n        else this.addNode(key, attributes);\n      }\n    }\n\n    if (data.edges) {\n      let undirectedByDefault = false;\n\n      if (this.type === 'undirected') {\n        undirectedByDefault = true;\n      }\n\n      list = data.edges;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid edges. Expecting an array.'\n        );\n\n      for (i = 0, l = list.length; i < l; i++) {\n        edge = list[i];\n\n        // Validating\n        validateSerializedEdge(edge);\n\n        // Adding the edge\n        const {\n          source,\n          target,\n          attributes,\n          undirected = undirectedByDefault\n        } = edge;\n\n        let method;\n\n        if ('key' in edge) {\n          method = merge\n            ? undirected\n              ? this.mergeUndirectedEdgeWithKey\n              : this.mergeDirectedEdgeWithKey\n            : undirected\n            ? this.addUndirectedEdgeWithKey\n            : this.addDirectedEdgeWithKey;\n\n          method.call(this, edge.key, source, target, attributes);\n        } else {\n          method = merge\n            ? undirected\n              ? this.mergeUndirectedEdge\n              : this.mergeDirectedEdge\n            : undirected\n            ? this.addUndirectedEdge\n            : this.addDirectedEdge;\n\n          method.call(this, source, target, attributes);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Utils\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning a null copy of the graph, i.e. a graph without nodes\n   * & edges but with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The null copy.\n   */\n  nullCopy(options) {\n    const graph = new Graph(assign({}, this._options, options));\n    graph.replaceAttributes(assign({}, this.getAttributes()));\n    return graph;\n  }\n\n  /**\n   * Method returning an empty copy of the graph, i.e. a graph without edges but\n   * with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The empty copy.\n   */\n  emptyCopy(options) {\n    const graph = this.nullCopy(options);\n\n    this._nodes.forEach((nodeData, key) => {\n      const attributes = assign({}, nodeData.attributes);\n\n      // NOTE: no need to emit events since user cannot access the instance yet\n      nodeData = new graph.NodeDataClass(key, attributes);\n      graph._nodes.set(key, nodeData);\n    });\n\n    return graph;\n  }\n\n  /**\n   * Method returning an exact copy of the graph.\n   *\n   * @param  {object} options - Upgrade options.\n   * @return {Graph}          - The copy.\n   */\n  copy(options) {\n    options = options || {};\n\n    if (\n      typeof options.type === 'string' &&\n      options.type !== this.type &&\n      options.type !== 'mixed'\n    )\n      throw new UsageGraphError(\n        `Graph.copy: cannot create an incompatible copy from \"${this.type}\" type to \"${options.type}\" because this would mean losing information about the current graph.`\n      );\n\n    if (\n      typeof options.multi === 'boolean' &&\n      options.multi !== this.multi &&\n      options.multi !== true\n    )\n      throw new UsageGraphError(\n        'Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.'\n      );\n\n    if (\n      typeof options.allowSelfLoops === 'boolean' &&\n      options.allowSelfLoops !== this.allowSelfLoops &&\n      options.allowSelfLoops !== true\n    )\n      throw new UsageGraphError(\n        'Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.'\n      );\n\n    const graph = this.emptyCopy(options);\n\n    const iterator = this._edges.values();\n\n    let step, edgeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      edgeData = step.value;\n\n      // NOTE: no need to emit events since user cannot access the instance yet\n      addEdge(\n        graph,\n        'copy',\n        false,\n        edgeData.undirected,\n        edgeData.key,\n        edgeData.source.key,\n        edgeData.target.key,\n        assign({}, edgeData.attributes)\n      );\n    }\n\n    return graph;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Known methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used by JavaScript to perform JSON serialization.\n   *\n   * @return {object} - The serialized graph.\n   */\n  toJSON() {\n    return this.export();\n  }\n\n  /**\n   * Method returning [object Graph].\n   */\n  toString() {\n    return '[object Graph]';\n  }\n\n  /**\n   * Method used internally by node's console to display a custom object.\n   *\n   * @return {object} - Formatted object representation of the graph.\n   */\n  inspect() {\n    const nodes = {};\n    this._nodes.forEach((data, key) => {\n      nodes[key] = data.attributes;\n    });\n\n    const edges = {},\n      multiIndex = {};\n\n    this._edges.forEach((data, key) => {\n      const direction = data.undirected ? '--' : '->';\n\n      let label = '';\n\n      let source = data.source.key;\n      let target = data.target.key;\n      let tmp;\n\n      if (data.undirected && source > target) {\n        tmp = source;\n        source = target;\n        target = tmp;\n      }\n\n      const desc = `(${source})${direction}(${target})`;\n\n      if (!key.startsWith('geid_')) {\n        label += `[${key}]: `;\n      } else if (this.multi) {\n        if (typeof multiIndex[desc] === 'undefined') {\n          multiIndex[desc] = 0;\n        } else {\n          multiIndex[desc]++;\n        }\n\n        label += `${multiIndex[desc]}. `;\n      }\n\n      label += desc;\n\n      edges[label] = data.attributes;\n    });\n\n    const dummy = {};\n\n    for (const k in this) {\n      if (\n        this.hasOwnProperty(k) &&\n        !EMITTER_PROPS.has(k) &&\n        typeof this[k] !== 'function' &&\n        typeof k !== 'symbol'\n      )\n        dummy[k] = this[k];\n    }\n\n    dummy.attributes = this._attributes;\n    dummy.nodes = nodes;\n    dummy.edges = edges;\n\n    privateProperty(dummy, 'constructor', this.constructor);\n\n    return dummy;\n  }\n}\n\n/**\n * Attaching methods to the prototype.\n *\n * Here, we are attaching a wide variety of methods to the Graph class'\n * prototype when those are very numerous and when their creation is\n * abstracted.\n */\n\n/**\n * Attaching custom inspect method for node >= 10.\n */\nif (typeof Symbol !== 'undefined')\n  Graph.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    Graph.prototype.inspect;\n\n/**\n * Related to edge addition.\n */\nEDGE_ADD_METHODS.forEach(method => {\n  ['add', 'merge', 'update'].forEach(verb => {\n    const name = method.name(verb);\n    const fn = verb === 'add' ? addEdge : mergeEdge;\n\n    if (method.generateKey) {\n      Graph.prototype[name] = function (source, target, attributes) {\n        return fn(\n          this,\n          name,\n          true,\n          (method.type || this.type) === 'undirected',\n          null,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    } else {\n      Graph.prototype[name] = function (edge, source, target, attributes) {\n        return fn(\n          this,\n          name,\n          false,\n          (method.type || this.type) === 'undirected',\n          edge,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    }\n  });\n});\n\n/**\n * Attributes-related.\n */\nattachNodeAttributesMethods(Graph);\nattachEdgeAttributesMethods(Graph);\n\n/**\n * Edge iteration-related.\n */\nattachEdgeIterationMethods(Graph);\n\n/**\n * Neighbor iteration-related.\n */\nattachNeighborIterationMethods(Graph);\n","/**\n * Graphology Helper Classes\n * ==========================\n *\n * Building some higher-order classes instantiating the graph with\n * predefinite options.\n */\nimport {assign} from './utils';\nimport Graph from './graph';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\n/**\n * Alternative constructors.\n */\nclass DirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError(\n        'DirectedGraph.from: inconsistent indication that the graph should be multi in given options!'\n      );\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError(\n        'DirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass UndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError(\n        'UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!'\n      );\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError(\n        'UndirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiDirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError(\n        'MultiDirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiUndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError(\n        'MultiUndirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\n\n/**\n * Attaching static #.from method to each of the constructors.\n */\nfunction attachStaticFromMethod(Class) {\n  /**\n   * Builds a graph from serialized data or another graph's data.\n   *\n   * @param  {Graph|SerializedGraph} data      - Hydratation data.\n   * @param  {object}                [options] - Options.\n   * @return {Class}\n   */\n  Class.from = function (data, options) {\n    // Merging given options with serialized ones\n    const finalOptions = assign({}, data.options, options);\n\n    const instance = new Class(finalOptions);\n    instance.import(data);\n\n    return instance;\n  };\n}\n\nattachStaticFromMethod(Graph);\nattachStaticFromMethod(DirectedGraph);\nattachStaticFromMethod(UndirectedGraph);\nattachStaticFromMethod(MultiGraph);\nattachStaticFromMethod(MultiDirectedGraph);\nattachStaticFromMethod(MultiUndirectedGraph);\n\nGraph.Graph = Graph;\nGraph.DirectedGraph = DirectedGraph;\nGraph.UndirectedGraph = UndirectedGraph;\nGraph.MultiGraph = MultiGraph;\nGraph.MultiDirectedGraph = MultiDirectedGraph;\nGraph.MultiUndirectedGraph = MultiUndirectedGraph;\n\nGraph.InvalidArgumentsGraphError = InvalidArgumentsGraphError;\nGraph.NotFoundGraphError = NotFoundGraphError;\nGraph.UsageGraphError = UsageGraphError;\n\nexport {\n  Graph,\n  DirectedGraph,\n  UndirectedGraph,\n  MultiGraph,\n  MultiDirectedGraph,\n  MultiUndirectedGraph\n};\n","/**\n * Graphology ESM Endoint\n * =======================\n *\n * Endpoint for ESM modules consumers.\n */\nimport {\n  Graph,\n  DirectedGraph,\n  UndirectedGraph,\n  MultiGraph,\n  MultiDirectedGraph,\n  MultiUndirectedGraph\n} from './classes';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\nexport default Graph;\n\nexport {\n  Graph,\n  DirectedGraph,\n  UndirectedGraph,\n  MultiGraph,\n  MultiDirectedGraph,\n  MultiUndirectedGraph,\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n};\n"],"names":[],"mappings":"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","debugId":null}}]
}