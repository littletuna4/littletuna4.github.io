{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/devlinux/devlinux/littletuna4.github.io/site/src/components/Industries/BaseGraph.tsx"],"sourcesContent":["'use client';\n/**\n * Functional Requirements:\n * - Generic network graph visualization component\n * - Light and Dark mode support using theme system\n * - Drag and drop functionality for nodes with fixed lock mode\n * - Force layout algorithm with configurable parameters\n * - Responsive design with proper theming\n * - Client-side rendering to prevent SSR issues\n * - Configurable graph data source\n * - Customizable styling and behavior\n * - Touch and pointer interaction support for drag, move, and release\n *\n */\nimport React, { useEffect, useState } from 'react';\nimport dynamic from 'next/dynamic';\n\nimport {\n  SigmaContainer,\n  useLoadGraph,\n  useSetSettings,\n  useRegisterEvents,\n  useSigma,\n} from '@react-sigma/core';\nimport { useWorkerLayoutForce } from '@react-sigma/layout-force';\nimport { useWorkerLayoutForceAtlas2 } from '@react-sigma/layout-forceatlas2';\nimport { useWorkerLayoutNoverlap } from '@react-sigma/layout-noverlap';\nimport { useTheme } from '@/components/providers/ThemeProvider';\nimport { palette } from '@/styles/palette';\nimport './sigma.css';\n\n// Type definitions for configuration\nexport interface ForceLayoutConfig {\n  attraction: number;\n  repulsion: number;\n  gravity: number;\n  inertia: number;\n  maxMove: number;\n  scalingRatio: number;\n  nodeScaling: boolean;\n  nodeProperty: string;\n}\n\nexport interface ForceAtlas2LayoutConfig {\n  linLogMode: boolean;\n  outboundAttractionDistribution: boolean;\n  adjustSizes: boolean;\n  edgeWeightInfluence: number;\n  scalingRatio: number;\n  strongGravityMode: boolean;\n  gravity: number;\n  slowDown: number;\n  barnesHutOptimize: boolean;\n  barnesHutTheta: number;\n  nodeScaling: boolean;\n  nodeProperty: string;\n}\n\nexport interface NoverlapLayoutConfig {\n  margin: number;\n  expansion: number;\n  gridSize: number;\n  speed: number;\n  maxIterations: number;\n  nodeScaling: boolean;\n  nodeProperty: string;\n}\n\nexport interface BaseGraphProps {\n  graphData: any; // Graph data from getIndustryGraph or similar\n  layout: string;\n  isLayoutRunning: boolean;\n  dragMode: boolean;\n  draggedNode: string | null;\n  setDraggedNode: (node: string | null) => void;\n  dragLockMode: 'none' | 'fixed' | 'pinned';\n  forceConfig: ForceLayoutConfig;\n  forceAtlas2Config?: ForceAtlas2LayoutConfig;\n  noverlapConfig?: NoverlapLayoutConfig;\n  minHeight?: string;\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nconst BaseGraphCore: React.FC<{\n  graphData: any;\n  layout: string;\n  isLayoutRunning: boolean;\n  dragMode: boolean;\n  draggedNode: string | null;\n  setDraggedNode: (node: string | null) => void;\n  dragLockMode: 'none' | 'fixed' | 'pinned';\n  forceConfig: ForceLayoutConfig;\n  forceAtlas2Config?: ForceAtlas2LayoutConfig;\n  noverlapConfig?: NoverlapLayoutConfig;\n}> = ({\n  graphData,\n  layout,\n  isLayoutRunning,\n  dragMode,\n  draggedNode,\n  setDraggedNode,\n  dragLockMode,\n  forceConfig,\n  forceAtlas2Config = {} as ForceAtlas2LayoutConfig,\n  noverlapConfig = {} as NoverlapLayoutConfig,\n}) => {\n  const { resolvedTheme } = useTheme();\n  const isDark = resolvedTheme === 'dark';\n  const loadGraph = useLoadGraph();\n  const setSettings = useSetSettings();\n  const registerEvents = useRegisterEvents();\n  const sigma = useSigma();\n\n  // Layout workers\n  const forceLayout = useWorkerLayoutForce();\n  const forceAtlas2Layout = useWorkerLayoutForceAtlas2();\n  const noverlapLayout = useWorkerLayoutNoverlap();\n\n  // Apply configuration changes without restarting layout\n  const applyConfigurationChanges = () => {\n    if (!sigma || draggedNode) return; // Don't apply changes during drag operations\n\n    const graph = sigma.getGraph();\n\n    // Apply node scaling if enabled - only update visual properties, not layout\n    if (\n      forceConfig.nodeScaling ||\n      forceAtlas2Config?.nodeScaling ||\n      noverlapConfig?.nodeScaling\n    ) {\n      graph.forEachNode(nodeId => {\n        const node = graph.getNodeAttributes(nodeId);\n        if (node.scaleFactor && !node.highlighted) {\n          // Don't modify highlighted/dragged nodes\n          // Apply scaling to node properties that affect layout behavior\n          if (forceConfig.nodeScaling && layout === 'force') {\n            // Scale node size based on configuration\n            const scaledSize =\n              node.baseSize *\n              (1 + (forceConfig.scalingRatio - 1) * node.scaleFactor);\n            graph.setNodeAttribute(nodeId, 'size', scaledSize);\n          }\n          if (forceAtlas2Config?.nodeScaling && layout === 'forceatlas2') {\n            // Scale node size based on configuration\n            const scaledSize =\n              node.baseSize *\n              (1 +\n                ((forceAtlas2Config.scalingRatio || 1) - 1) * node.scaleFactor);\n            graph.setNodeAttribute(nodeId, 'size', scaledSize);\n          }\n          if (noverlapConfig?.nodeScaling && layout === 'noverlap') {\n            // Scale node size based on configuration\n            const scaledSize =\n              node.baseSize *\n              (1 + ((noverlapConfig.margin || 8) / 10) * node.scaleFactor);\n            graph.setNodeAttribute(nodeId, 'size', scaledSize);\n          }\n        }\n      });\n    }\n\n    // Note: We don't restart the layout here to prevent jitter\n    // Layout parameters are applied directly to the running layout workers\n  };\n\n  // Load graph data only once\n  useEffect(() => {\n    loadGraph(graphData);\n  }, [loadGraph, graphData]);\n\n  // Update settings when theme changes, but don't reload graph\n  useEffect(() => {\n    setSettings({\n      allowInvalidContainer: true,\n      renderLabels: true,\n      labelSize: 12,\n      labelWeight: 'bold',\n      labelFont: 'system-ui, -apple-system, sans-serif',\n      labelColor: {\n        color: isDark ? palette.dark.foreground : palette.light.foreground,\n      },\n      hideLabelsOnMove: false,\n      labelDensity: 1,\n      labelRenderedSizeThreshold: 0,\n      defaultNodeColor: isDark ? palette.dark.primary : palette.light.primary,\n      defaultEdgeColor: isDark\n        ? palette.dark.foreground\n        : palette.light.foreground,\n      // Disable camera movement when dragging a node\n      enableCameraRotation: !draggedNode,\n      enableCameraPanning: !draggedNode,\n      enableCameraZooming: !draggedNode,\n      defaultDrawNodeHover: (ctx, data, settings) => {\n        const { x, y, size, color, label } = data;\n        const borderColor = isDark\n          ? palette.dark.background\n          : palette.light.background;\n        const borderWidth = 3;\n        const textBackgroundColor = isDark\n          ? palette.dark.foreground\n          : palette.light.foreground;\n        const textColor = isDark\n          ? palette.dark.background\n          : palette.light.background;\n        const padding = 2;\n\n        // Save the current context state\n        ctx.save();\n\n        // Set the border color and width\n        ctx.strokeStyle = borderColor;\n        ctx.lineWidth = borderWidth;\n        ctx.lineCap = 'round';\n        ctx.lineJoin = 'round';\n\n        // Draw the border circle\n        ctx.beginPath();\n        ctx.arc(x, y, size + borderWidth / 2, 0, 2 * Math.PI);\n        ctx.stroke();\n\n        // Draw text background if label exists\n        if (label) {\n          const fontSize = settings.labelSize || 12;\n          const font =\n            settings.labelFont || 'system-ui, -apple-system, sans-serif';\n          const fontWeight = settings.labelWeight || 'bold';\n          const labelColor = textColor;\n\n          // Set font and measure text (matching original settings)\n          ctx.font = `${fontWeight} ${fontSize}px ${font}`;\n          const textWidth = ctx.measureText(label).width;\n          const textHeight = fontSize;\n\n          // Draw text background\n          ctx.fillStyle = textBackgroundColor;\n          ctx.fillRect(\n            x + size + padding,\n            y - textHeight / 2 - padding,\n            textWidth + 2 * padding,\n            textHeight + 2 * padding\n          );\n\n          // Draw node label (using original label color)\n          ctx.fillStyle = labelColor;\n          ctx.textAlign = 'left';\n          ctx.textBaseline = 'middle';\n          ctx.fillText(label, x + size + padding * 2, y);\n        }\n\n        // Restore the context state\n        ctx.restore();\n      },\n      nodeReducer: (_, attrs) => ({\n        ...attrs,\n        size: attrs.highlighted ? attrs.size * 1.3 : attrs.size,\n        color: attrs.highlighted\n          ? isDark\n            ? palette.dark.primary\n            : palette.light.primary\n          : attrs.color ||\n            (isDark ? palette.dark.primary : palette.light.primary),\n        highlighted: attrs.highlighted || false,\n        // Custom properties for visual styling (not part of NodeDisplayData interface)\n        borderColor: attrs.highlighted\n          ? isDark\n            ? palette.dark.foreground\n            : palette.light.foreground\n          : attrs.pinned\n            ? palette.dark.destructive\n            : attrs.fixed\n              ? palette.dark.warning\n              : undefined,\n        borderSize: attrs.highlighted ? 3 : attrs.pinned || attrs.fixed ? 2 : 0,\n        labelOutlineColor: isDark\n          ? palette.dark.background\n          : palette.light.background,\n        labelOutlineWidth: 2,\n      }),\n      edgeReducer: (_, attrs) => ({\n        ...attrs,\n        size: attrs.weight || 1,\n        color: attrs.highlighted\n          ? isDark\n            ? palette.dark.primary\n            : palette.light.primary\n          : isDark\n            ? palette.dark.foreground\n            : palette.light.foreground,\n      }),\n    });\n\n    // Auto-fit the graph after a short delay to ensure proper positioning\n    setTimeout(() => {\n      if (sigma) {\n        sigma.getCamera().animatedReset({ duration: 1000 });\n      }\n    }, 1000);\n  }, [setSettings, sigma, isDark, draggedNode]);\n\n  // Handle layout workers\n  useEffect(() => {\n    if (!isLayoutRunning) {\n      forceLayout.stop();\n      forceAtlas2Layout.stop();\n      noverlapLayout.stop();\n      return;\n    }\n\n    switch (layout) {\n      case 'force':\n        forceLayout.start();\n        break;\n      case 'forceatlas2':\n        forceAtlas2Layout.start();\n        break;\n      case 'noverlap':\n        noverlapLayout.start();\n        break;\n    }\n\n    return () => {\n      forceLayout.stop();\n      forceAtlas2Layout.stop();\n      noverlapLayout.stop();\n    };\n  }, [layout, isLayoutRunning, forceLayout, forceAtlas2Layout, noverlapLayout]);\n\n  // Handle configuration changes - apply without restarting layout\n  useEffect(() => {\n    applyConfigurationChanges();\n  }, [\n    forceConfig.nodeScaling,\n    forceConfig.scalingRatio,\n    forceAtlas2Config?.nodeScaling,\n    forceAtlas2Config?.scalingRatio,\n    noverlapConfig?.nodeScaling,\n    noverlapConfig?.margin,\n    layout,\n    draggedNode, // Include draggedNode to prevent changes during drag\n  ]);\n\n  // Handle drag events\n  useEffect(() => {\n    if (!dragMode) {\n      registerEvents({});\n      return;\n    }\n\n    // Normalize mouse/touch coordinates to graph coordinates\n    const getGraphCoordsFromEvent = (evt: any) => {\n      const original = evt?.original as any;\n      let clientX: number | undefined;\n      let clientY: number | undefined;\n\n      if (original?.touches && original.touches.length > 0) {\n        clientX = original.touches[0].clientX;\n        clientY = original.touches[0].clientY;\n      } else if (\n        original?.changedTouches &&\n        original.changedTouches.length > 0\n      ) {\n        clientX = original.changedTouches[0].clientX;\n        clientY = original.changedTouches[0].clientY;\n      } else if (\n        typeof original?.clientX === 'number' &&\n        typeof original?.clientY === 'number'\n      ) {\n        clientX = original.clientX;\n        clientY = original.clientY;\n      } else if (typeof evt?.x === 'number' && typeof evt?.y === 'number') {\n        clientX = evt.x;\n        clientY = evt.y;\n      }\n\n      // Get the container's position to calculate relative coordinates\n      const container = sigma.getContainer();\n      const rect = container.getBoundingClientRect();\n\n      // Convert client coordinates to container-relative coordinates\n      const containerX = (clientX ?? 0) - rect.left;\n      const containerY = (clientY ?? 0) - rect.top;\n\n      const viewportPoint = { x: containerX, y: containerY } as {\n        x: number;\n        y: number;\n      };\n      return sigma.viewportToGraph(viewportPoint as { x: number; y: number });\n    };\n\n    registerEvents({\n      downNode: e => {\n        setDraggedNode(e.node);\n        const graph = sigma.getGraph();\n        graph.setNodeAttribute(e.node, 'highlighted', true);\n\n        // Apply drag lock mode\n        if (dragLockMode === 'fixed') {\n          graph.setNodeAttribute(e.node, 'fixed', true);\n        } else if (dragLockMode === 'pinned') {\n          graph.setNodeAttribute(e.node, 'pinned', true);\n        }\n\n        document.body.style.cursor = 'grabbing';\n\n        // Prevent default sigma behavior (camera pan) when starting node drag\n        e.preventSigmaDefault();\n      },\n\n      mousemovebody: e => {\n        if (!draggedNode) return;\n\n        const pos = getGraphCoordsFromEvent(e);\n        const graph = sigma.getGraph();\n        graph.setNodeAttribute(draggedNode, 'x', pos.x);\n        graph.setNodeAttribute(draggedNode, 'y', pos.y);\n\n        e.preventSigmaDefault();\n        e.original.preventDefault();\n        e.original.stopPropagation();\n      },\n\n      // Touch and Pointer move support mirrors mousemovebody\n      touchmovebody: e => {\n        if (!draggedNode) return;\n\n        const pos = getGraphCoordsFromEvent(e);\n        const graph = sigma.getGraph();\n        graph.setNodeAttribute(draggedNode, 'x', pos.x);\n        graph.setNodeAttribute(draggedNode, 'y', pos.y);\n\n        e.preventSigmaDefault();\n        e.original.preventDefault();\n        e.original.stopPropagation();\n      },\n\n      mouseup: () => {\n        if (draggedNode) {\n          const graph = sigma.getGraph();\n          graph.setNodeAttribute(draggedNode, 'highlighted', false);\n\n          // Handle drag lock mode release\n          if (dragLockMode === 'fixed') {\n            // Release fixed lock after drag\n            graph.setNodeAttribute(draggedNode, 'fixed', false);\n          }\n          // For pinned mode, keep the pinned state\n\n          setDraggedNode(null);\n          document.body.style.cursor = 'default';\n        }\n      },\n\n      // Touch end handled via global listener to avoid event map type mismatch\n\n      mousedown: e => {\n        // Prevent camera pan when clicking for node drag\n        if (!sigma.getCustomBBox()) sigma.setCustomBBox(sigma.getBBox());\n        // If we're about to drag a node, prevent default camera behavior\n        if (draggedNode) {\n          e.preventSigmaDefault();\n        }\n      },\n\n      enterNode: () => {\n        if (!draggedNode) {\n          document.body.style.cursor = 'grab';\n        }\n      },\n\n      leaveNode: () => {\n        if (!draggedNode) {\n          document.body.style.cursor = 'default';\n        }\n      },\n\n      // Double-click to toggle pinned state\n      doubleClickNode: e => {\n        const graph = sigma.getGraph();\n        const isPinned = graph.getNodeAttribute(e.node, 'pinned') || false;\n        graph.setNodeAttribute(e.node, 'pinned', !isPinned);\n      },\n    });\n\n    return () => {\n      document.body.style.cursor = 'default';\n    };\n  }, [\n    registerEvents,\n    sigma,\n    draggedNode,\n    dragMode,\n    dragLockMode,\n    setDraggedNode,\n  ]);\n\n  // Add global touch event support for dragging on touch devices\n  useEffect(() => {\n    if (!dragMode) return;\n\n    const handleTouchMove = (ev: TouchEvent) => {\n      if (!draggedNode) return;\n      if (ev.touches.length === 0) return;\n\n      const touch = ev.touches[0];\n\n      // Get the container's position to calculate relative coordinates\n      const container = sigma.getContainer();\n      const rect = container.getBoundingClientRect();\n\n      // Convert client coordinates to container-relative coordinates\n      const containerX = touch.clientX - rect.left;\n      const containerY = touch.clientY - rect.top;\n\n      const pos = sigma.viewportToGraph({ x: containerX, y: containerY });\n      const graph = sigma.getGraph();\n      graph.setNodeAttribute(draggedNode, 'x', pos.x);\n      graph.setNodeAttribute(draggedNode, 'y', pos.y);\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n\n    const handleTouchEnd = (_ev: TouchEvent) => {\n      if (!draggedNode) return;\n      const graph = sigma.getGraph();\n      graph.setNodeAttribute(draggedNode, 'highlighted', false);\n      if (dragLockMode === 'fixed') {\n        graph.setNodeAttribute(draggedNode, 'fixed', false);\n      }\n      setDraggedNode(null);\n      document.body.style.cursor = 'default';\n    };\n\n    document.addEventListener('touchmove', handleTouchMove, { passive: false });\n    document.addEventListener('touchend', handleTouchEnd, { passive: false });\n\n    return () => {\n      document.removeEventListener('touchmove', handleTouchMove);\n      document.removeEventListener('touchend', handleTouchEnd);\n    };\n  }, [dragMode, draggedNode, sigma, setDraggedNode, dragLockMode]);\n\n  return null;\n};\n\nconst BaseGraph: React.FC<BaseGraphProps> = ({\n  graphData,\n  layout,\n  isLayoutRunning,\n  dragMode,\n  draggedNode,\n  setDraggedNode,\n  dragLockMode,\n  forceConfig,\n  forceAtlas2Config,\n  noverlapConfig,\n  minHeight = '600px',\n  className = 'h-full w-full relative bg-background',\n  style,\n}) => {\n  const [isMounted, setIsMounted] = useState(false);\n\n  // Ensure component only renders on client side\n  useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  // Don't render anything until mounted on client side\n  if (!isMounted) {\n    return (\n      <div className={className} style={{ ...style, minHeight }}>\n        <div className='flex items-center justify-center h-full'>\n          <div className='text-foreground'>Loading graph...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={className} style={{ ...style, minHeight }}>\n      <SigmaContainer\n        style={{ height: '100%', width: '100%' }}\n        settings={{ allowInvalidContainer: true }}\n      >\n        <BaseGraphCore\n          graphData={graphData}\n          layout={layout}\n          isLayoutRunning={isLayoutRunning}\n          dragMode={dragMode}\n          draggedNode={draggedNode}\n          setDraggedNode={setDraggedNode}\n          dragLockMode={dragLockMode}\n          forceConfig={forceConfig}\n          forceAtlas2Config={forceAtlas2Config}\n          noverlapConfig={noverlapConfig}\n        />\n      </SigmaContainer>\n    </div>\n  );\n};\n\n// Export with dynamic import to prevent SSR\nconst DynamicBaseGraph = dynamic(() => Promise.resolve(BaseGraph), {\n  ssr: false,\n  loading: () => (\n    <div\n      className='h-full w-full relative flex items-center justify-center bg-background'\n      style={{ minHeight: '600px' }}\n    >\n      <div className='text-foreground'>Loading graph...</div>\n    </div>\n  ),\n});\n\n// Only export the dynamic version to prevent SSR issues\nexport default DynamicBaseGraph;\n"],"names":[],"mappings":";;;;;AACA;;;;;;;;;;;;CAYC,GACD;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;;;AA5BA;;;;;;;;;;AAoFA,MAAM,gBAWD;QAAC,EACJ,SAAS,EACT,MAAM,EACN,eAAe,EACf,QAAQ,EACR,WAAW,EACX,cAAc,EACd,YAAY,EACZ,WAAW,EACX,oBAAoB,CAAC,CAA4B,EACjD,iBAAiB,CAAC,CAAyB,EAC5C;;IACC,MAAM,EAAE,aAAa,EAAE,GAAG,IAAA,kNAAQ;IAClC,MAAM,SAAS,kBAAkB;IACjC,MAAM,YAAY,IAAA,kdAAY;IAC9B,MAAM,cAAc,IAAA,odAAc;IAClC,MAAM,iBAAiB,IAAA,udAAiB;IACxC,MAAM,QAAQ,IAAA,8cAAQ;IAEtB,iBAAiB;IACjB,MAAM,cAAc,IAAA,+dAAoB;IACxC,MAAM,oBAAoB,IAAA,qeAA0B;IACpD,MAAM,iBAAiB,IAAA,keAAuB;IAE9C,wDAAwD;IACxD,MAAM,4BAA4B;QAChC,IAAI,CAAC,SAAS,aAAa,QAAQ,6CAA6C;QAEhF,MAAM,QAAQ,MAAM,QAAQ;QAE5B,4EAA4E;QAC5E,IACE,YAAY,WAAW,KACvB,8BAAA,wCAAA,kBAAmB,WAAW,MAC9B,2BAAA,qCAAA,eAAgB,WAAW,GAC3B;YACA,MAAM,WAAW,CAAC,CAAA;gBAChB,MAAM,OAAO,MAAM,iBAAiB,CAAC;gBACrC,IAAI,KAAK,WAAW,IAAI,CAAC,KAAK,WAAW,EAAE;oBACzC,yCAAyC;oBACzC,+DAA+D;oBAC/D,IAAI,YAAY,WAAW,IAAI,WAAW,SAAS;wBACjD,yCAAyC;wBACzC,MAAM,aACJ,KAAK,QAAQ,GACb,CAAC,IAAI,CAAC,YAAY,YAAY,GAAG,CAAC,IAAI,KAAK,WAAW;wBACxD,MAAM,gBAAgB,CAAC,QAAQ,QAAQ;oBACzC;oBACA,IAAI,CAAA,8BAAA,wCAAA,kBAAmB,WAAW,KAAI,WAAW,eAAe;wBAC9D,yCAAyC;wBACzC,MAAM,aACJ,KAAK,QAAQ,GACb,CAAC,IACC,CAAC,CAAC,kBAAkB,YAAY,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,WAAW;wBAClE,MAAM,gBAAgB,CAAC,QAAQ,QAAQ;oBACzC;oBACA,IAAI,CAAA,2BAAA,qCAAA,eAAgB,WAAW,KAAI,WAAW,YAAY;wBACxD,yCAAyC;wBACzC,MAAM,aACJ,KAAK,QAAQ,GACb,CAAC,IAAI,AAAC,CAAC,eAAe,MAAM,IAAI,CAAC,IAAI,KAAM,KAAK,WAAW;wBAC7D,MAAM,gBAAgB,CAAC,QAAQ,QAAQ;oBACzC;gBACF;YACF;QACF;IAEA,2DAA2D;IAC3D,uEAAuE;IACzE;IAEA,4BAA4B;IAC5B,IAAA,4VAAS;mCAAC;YACR,UAAU;QACZ;kCAAG;QAAC;QAAW;KAAU;IAEzB,6DAA6D;IAC7D,IAAA,4VAAS;mCAAC;YACR,YAAY;gBACV,uBAAuB;gBACvB,cAAc;gBACd,WAAW;gBACX,aAAa;gBACb,WAAW;gBACX,YAAY;oBACV,OAAO,SAAS,yLAAO,CAAC,IAAI,CAAC,UAAU,GAAG,yLAAO,CAAC,KAAK,CAAC,UAAU;gBACpE;gBACA,kBAAkB;gBAClB,cAAc;gBACd,4BAA4B;gBAC5B,kBAAkB,SAAS,yLAAO,CAAC,IAAI,CAAC,OAAO,GAAG,yLAAO,CAAC,KAAK,CAAC,OAAO;gBACvE,kBAAkB,SACd,yLAAO,CAAC,IAAI,CAAC,UAAU,GACvB,yLAAO,CAAC,KAAK,CAAC,UAAU;gBAC5B,+CAA+C;gBAC/C,sBAAsB,CAAC;gBACvB,qBAAqB,CAAC;gBACtB,qBAAqB,CAAC;gBACtB,oBAAoB;+CAAE,CAAC,KAAK,MAAM;wBAChC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG;wBACrC,MAAM,cAAc,SAChB,yLAAO,CAAC,IAAI,CAAC,UAAU,GACvB,yLAAO,CAAC,KAAK,CAAC,UAAU;wBAC5B,MAAM,cAAc;wBACpB,MAAM,sBAAsB,SACxB,yLAAO,CAAC,IAAI,CAAC,UAAU,GACvB,yLAAO,CAAC,KAAK,CAAC,UAAU;wBAC5B,MAAM,YAAY,SACd,yLAAO,CAAC,IAAI,CAAC,UAAU,GACvB,yLAAO,CAAC,KAAK,CAAC,UAAU;wBAC5B,MAAM,UAAU;wBAEhB,iCAAiC;wBACjC,IAAI,IAAI;wBAER,iCAAiC;wBACjC,IAAI,WAAW,GAAG;wBAClB,IAAI,SAAS,GAAG;wBAChB,IAAI,OAAO,GAAG;wBACd,IAAI,QAAQ,GAAG;wBAEf,yBAAyB;wBACzB,IAAI,SAAS;wBACb,IAAI,GAAG,CAAC,GAAG,GAAG,OAAO,cAAc,GAAG,GAAG,IAAI,KAAK,EAAE;wBACpD,IAAI,MAAM;wBAEV,uCAAuC;wBACvC,IAAI,OAAO;4BACT,MAAM,WAAW,SAAS,SAAS,IAAI;4BACvC,MAAM,OACJ,SAAS,SAAS,IAAI;4BACxB,MAAM,aAAa,SAAS,WAAW,IAAI;4BAC3C,MAAM,aAAa;4BAEnB,yDAAyD;4BACzD,IAAI,IAAI,GAAG,AAAC,GAAgB,OAAd,YAAW,KAAiB,OAAd,UAAS,OAAU,OAAL;4BAC1C,MAAM,YAAY,IAAI,WAAW,CAAC,OAAO,KAAK;4BAC9C,MAAM,aAAa;4BAEnB,uBAAuB;4BACvB,IAAI,SAAS,GAAG;4BAChB,IAAI,QAAQ,CACV,IAAI,OAAO,SACX,IAAI,aAAa,IAAI,SACrB,YAAY,IAAI,SAChB,aAAa,IAAI;4BAGnB,+CAA+C;4BAC/C,IAAI,SAAS,GAAG;4BAChB,IAAI,SAAS,GAAG;4BAChB,IAAI,YAAY,GAAG;4BACnB,IAAI,QAAQ,CAAC,OAAO,IAAI,OAAO,UAAU,GAAG;wBAC9C;wBAEA,4BAA4B;wBAC5B,IAAI,OAAO;oBACb;;gBACA,WAAW;+CAAE,CAAC,GAAG,QAAU,CAAC;4BAC1B,GAAG,KAAK;4BACR,MAAM,MAAM,WAAW,GAAG,MAAM,IAAI,GAAG,MAAM,MAAM,IAAI;4BACvD,OAAO,MAAM,WAAW,GACpB,SACE,yLAAO,CAAC,IAAI,CAAC,OAAO,GACpB,yLAAO,CAAC,KAAK,CAAC,OAAO,GACvB,MAAM,KAAK,IACX,CAAC,SAAS,yLAAO,CAAC,IAAI,CAAC,OAAO,GAAG,yLAAO,CAAC,KAAK,CAAC,OAAO;4BAC1D,aAAa,MAAM,WAAW,IAAI;4BAClC,+EAA+E;4BAC/E,aAAa,MAAM,WAAW,GAC1B,SACE,yLAAO,CAAC,IAAI,CAAC,UAAU,GACvB,yLAAO,CAAC,KAAK,CAAC,UAAU,GAC1B,MAAM,MAAM,GACV,yLAAO,CAAC,IAAI,CAAC,WAAW,GACxB,MAAM,KAAK,GACT,yLAAO,CAAC,IAAI,CAAC,OAAO,GACpB;4BACR,YAAY,MAAM,WAAW,GAAG,IAAI,MAAM,MAAM,IAAI,MAAM,KAAK,GAAG,IAAI;4BACtE,mBAAmB,SACf,yLAAO,CAAC,IAAI,CAAC,UAAU,GACvB,yLAAO,CAAC,KAAK,CAAC,UAAU;4BAC5B,mBAAmB;wBACrB,CAAC;;gBACD,WAAW;+CAAE,CAAC,GAAG,QAAU,CAAC;4BAC1B,GAAG,KAAK;4BACR,MAAM,MAAM,MAAM,IAAI;4BACtB,OAAO,MAAM,WAAW,GACpB,SACE,yLAAO,CAAC,IAAI,CAAC,OAAO,GACpB,yLAAO,CAAC,KAAK,CAAC,OAAO,GACvB,SACE,yLAAO,CAAC,IAAI,CAAC,UAAU,GACvB,yLAAO,CAAC,KAAK,CAAC,UAAU;wBAChC,CAAC;;YACH;YAEA,sEAAsE;YACtE;2CAAW;oBACT,IAAI,OAAO;wBACT,MAAM,SAAS,GAAG,aAAa,CAAC;4BAAE,UAAU;wBAAK;oBACnD;gBACF;0CAAG;QACL;kCAAG;QAAC;QAAa;QAAO;QAAQ;KAAY;IAE5C,wBAAwB;IACxB,IAAA,4VAAS;mCAAC;YACR,IAAI,CAAC,iBAAiB;gBACpB,YAAY,IAAI;gBAChB,kBAAkB,IAAI;gBACtB,eAAe,IAAI;gBACnB;YACF;YAEA,OAAQ;gBACN,KAAK;oBACH,YAAY,KAAK;oBACjB;gBACF,KAAK;oBACH,kBAAkB,KAAK;oBACvB;gBACF,KAAK;oBACH,eAAe,KAAK;oBACpB;YACJ;YAEA;2CAAO;oBACL,YAAY,IAAI;oBAChB,kBAAkB,IAAI;oBACtB,eAAe,IAAI;gBACrB;;QACF;kCAAG;QAAC;QAAQ;QAAiB;QAAa;QAAmB;KAAe;IAE5E,iEAAiE;IACjE,IAAA,4VAAS;mCAAC;YACR;QACF;kCAAG;QACD,YAAY,WAAW;QACvB,YAAY,YAAY;QACxB,8BAAA,wCAAA,kBAAmB,WAAW;QAC9B,8BAAA,wCAAA,kBAAmB,YAAY;QAC/B,2BAAA,qCAAA,eAAgB,WAAW;QAC3B,2BAAA,qCAAA,eAAgB,MAAM;QACtB;QACA;KACD;IAED,qBAAqB;IACrB,IAAA,4VAAS;mCAAC;YACR,IAAI,CAAC,UAAU;gBACb,eAAe,CAAC;gBAChB;YACF;YAEA,yDAAyD;YACzD,MAAM;mEAA0B,CAAC;oBAC/B,MAAM,WAAW,gBAAA,0BAAA,IAAK,QAAQ;oBAC9B,IAAI;oBACJ,IAAI;oBAEJ,IAAI,CAAA,qBAAA,+BAAA,SAAU,OAAO,KAAI,SAAS,OAAO,CAAC,MAAM,GAAG,GAAG;wBACpD,UAAU,SAAS,OAAO,CAAC,EAAE,CAAC,OAAO;wBACrC,UAAU,SAAS,OAAO,CAAC,EAAE,CAAC,OAAO;oBACvC,OAAO,IACL,CAAA,qBAAA,+BAAA,SAAU,cAAc,KACxB,SAAS,cAAc,CAAC,MAAM,GAAG,GACjC;wBACA,UAAU,SAAS,cAAc,CAAC,EAAE,CAAC,OAAO;wBAC5C,UAAU,SAAS,cAAc,CAAC,EAAE,CAAC,OAAO;oBAC9C,OAAO,IACL,QAAO,qBAAA,+BAAA,SAAU,OAAO,MAAK,YAC7B,QAAO,qBAAA,+BAAA,SAAU,OAAO,MAAK,UAC7B;wBACA,UAAU,SAAS,OAAO;wBAC1B,UAAU,SAAS,OAAO;oBAC5B,OAAO,IAAI,QAAO,gBAAA,0BAAA,IAAK,CAAC,MAAK,YAAY,QAAO,gBAAA,0BAAA,IAAK,CAAC,MAAK,UAAU;wBACnE,UAAU,IAAI,CAAC;wBACf,UAAU,IAAI,CAAC;oBACjB;oBAEA,iEAAiE;oBACjE,MAAM,YAAY,MAAM,YAAY;oBACpC,MAAM,OAAO,UAAU,qBAAqB;oBAE5C,+DAA+D;oBAC/D,MAAM,aAAa,CAAC,oBAAA,qBAAA,UAAW,CAAC,IAAI,KAAK,IAAI;oBAC7C,MAAM,aAAa,CAAC,oBAAA,qBAAA,UAAW,CAAC,IAAI,KAAK,GAAG;oBAE5C,MAAM,gBAAgB;wBAAE,GAAG;wBAAY,GAAG;oBAAW;oBAIrD,OAAO,MAAM,eAAe,CAAC;gBAC/B;;YAEA,eAAe;gBACb,QAAQ;+CAAE,CAAA;wBACR,eAAe,EAAE,IAAI;wBACrB,MAAM,QAAQ,MAAM,QAAQ;wBAC5B,MAAM,gBAAgB,CAAC,EAAE,IAAI,EAAE,eAAe;wBAE9C,uBAAuB;wBACvB,IAAI,iBAAiB,SAAS;4BAC5B,MAAM,gBAAgB,CAAC,EAAE,IAAI,EAAE,SAAS;wBAC1C,OAAO,IAAI,iBAAiB,UAAU;4BACpC,MAAM,gBAAgB,CAAC,EAAE,IAAI,EAAE,UAAU;wBAC3C;wBAEA,SAAS,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG;wBAE7B,sEAAsE;wBACtE,EAAE,mBAAmB;oBACvB;;gBAEA,aAAa;+CAAE,CAAA;wBACb,IAAI,CAAC,aAAa;wBAElB,MAAM,MAAM,wBAAwB;wBACpC,MAAM,QAAQ,MAAM,QAAQ;wBAC5B,MAAM,gBAAgB,CAAC,aAAa,KAAK,IAAI,CAAC;wBAC9C,MAAM,gBAAgB,CAAC,aAAa,KAAK,IAAI,CAAC;wBAE9C,EAAE,mBAAmB;wBACrB,EAAE,QAAQ,CAAC,cAAc;wBACzB,EAAE,QAAQ,CAAC,eAAe;oBAC5B;;gBAEA,uDAAuD;gBACvD,aAAa;+CAAE,CAAA;wBACb,IAAI,CAAC,aAAa;wBAElB,MAAM,MAAM,wBAAwB;wBACpC,MAAM,QAAQ,MAAM,QAAQ;wBAC5B,MAAM,gBAAgB,CAAC,aAAa,KAAK,IAAI,CAAC;wBAC9C,MAAM,gBAAgB,CAAC,aAAa,KAAK,IAAI,CAAC;wBAE9C,EAAE,mBAAmB;wBACrB,EAAE,QAAQ,CAAC,cAAc;wBACzB,EAAE,QAAQ,CAAC,eAAe;oBAC5B;;gBAEA,OAAO;+CAAE;wBACP,IAAI,aAAa;4BACf,MAAM,QAAQ,MAAM,QAAQ;4BAC5B,MAAM,gBAAgB,CAAC,aAAa,eAAe;4BAEnD,gCAAgC;4BAChC,IAAI,iBAAiB,SAAS;gCAC5B,gCAAgC;gCAChC,MAAM,gBAAgB,CAAC,aAAa,SAAS;4BAC/C;4BACA,yCAAyC;4BAEzC,eAAe;4BACf,SAAS,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG;wBAC/B;oBACF;;gBAEA,yEAAyE;gBAEzE,SAAS;+CAAE,CAAA;wBACT,iDAAiD;wBACjD,IAAI,CAAC,MAAM,aAAa,IAAI,MAAM,aAAa,CAAC,MAAM,OAAO;wBAC7D,iEAAiE;wBACjE,IAAI,aAAa;4BACf,EAAE,mBAAmB;wBACvB;oBACF;;gBAEA,SAAS;+CAAE;wBACT,IAAI,CAAC,aAAa;4BAChB,SAAS,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG;wBAC/B;oBACF;;gBAEA,SAAS;+CAAE;wBACT,IAAI,CAAC,aAAa;4BAChB,SAAS,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG;wBAC/B;oBACF;;gBAEA,sCAAsC;gBACtC,eAAe;+CAAE,CAAA;wBACf,MAAM,QAAQ,MAAM,QAAQ;wBAC5B,MAAM,WAAW,MAAM,gBAAgB,CAAC,EAAE,IAAI,EAAE,aAAa;wBAC7D,MAAM,gBAAgB,CAAC,EAAE,IAAI,EAAE,UAAU,CAAC;oBAC5C;;YACF;YAEA;2CAAO;oBACL,SAAS,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG;gBAC/B;;QACF;kCAAG;QACD;QACA;QACA;QACA;QACA;QACA;KACD;IAED,+DAA+D;IAC/D,IAAA,4VAAS;mCAAC;YACR,IAAI,CAAC,UAAU;YAEf,MAAM;2DAAkB,CAAC;oBACvB,IAAI,CAAC,aAAa;oBAClB,IAAI,GAAG,OAAO,CAAC,MAAM,KAAK,GAAG;oBAE7B,MAAM,QAAQ,GAAG,OAAO,CAAC,EAAE;oBAE3B,iEAAiE;oBACjE,MAAM,YAAY,MAAM,YAAY;oBACpC,MAAM,OAAO,UAAU,qBAAqB;oBAE5C,+DAA+D;oBAC/D,MAAM,aAAa,MAAM,OAAO,GAAG,KAAK,IAAI;oBAC5C,MAAM,aAAa,MAAM,OAAO,GAAG,KAAK,GAAG;oBAE3C,MAAM,MAAM,MAAM,eAAe,CAAC;wBAAE,GAAG;wBAAY,GAAG;oBAAW;oBACjE,MAAM,QAAQ,MAAM,QAAQ;oBAC5B,MAAM,gBAAgB,CAAC,aAAa,KAAK,IAAI,CAAC;oBAC9C,MAAM,gBAAgB,CAAC,aAAa,KAAK,IAAI,CAAC;oBAE9C,GAAG,cAAc;oBACjB,GAAG,eAAe;gBACpB;;YAEA,MAAM;0DAAiB,CAAC;oBACtB,IAAI,CAAC,aAAa;oBAClB,MAAM,QAAQ,MAAM,QAAQ;oBAC5B,MAAM,gBAAgB,CAAC,aAAa,eAAe;oBACnD,IAAI,iBAAiB,SAAS;wBAC5B,MAAM,gBAAgB,CAAC,aAAa,SAAS;oBAC/C;oBACA,eAAe;oBACf,SAAS,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG;gBAC/B;;YAEA,SAAS,gBAAgB,CAAC,aAAa,iBAAiB;gBAAE,SAAS;YAAM;YACzE,SAAS,gBAAgB,CAAC,YAAY,gBAAgB;gBAAE,SAAS;YAAM;YAEvE;2CAAO;oBACL,SAAS,mBAAmB,CAAC,aAAa;oBAC1C,SAAS,mBAAmB,CAAC,YAAY;gBAC3C;;QACF;kCAAG;QAAC;QAAU;QAAa;QAAO;QAAgB;KAAa;IAE/D,OAAO;AACT;GA5cM;;QAuBsB,kNAAQ;QAEhB,kdAAY;QACV,odAAc;QACX,udAAiB;QAC1B,8cAAQ;QAGF,+dAAoB;QACd,qeAA0B;QAC7B,keAAuB;;;KAjC1C;AA8cN,MAAM,YAAsC;QAAC,EAC3C,SAAS,EACT,MAAM,EACN,eAAe,EACf,QAAQ,EACR,WAAW,EACX,cAAc,EACd,YAAY,EACZ,WAAW,EACX,iBAAiB,EACjB,cAAc,EACd,YAAY,OAAO,EACnB,YAAY,sCAAsC,EAClD,KAAK,EACN;;IACC,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,2VAAQ,EAAC;IAE3C,+CAA+C;IAC/C,IAAA,4VAAS;+BAAC;YACR,aAAa;QACf;8BAAG,EAAE;IAEL,qDAAqD;IACrD,IAAI,CAAC,WAAW;QACd,qBACE,+WAAC;YAAI,WAAW;YAAW,OAAO;gBAAE,GAAG,KAAK;gBAAE;YAAU;sBACtD,cAAA,+WAAC;gBAAI,WAAU;0BACb,cAAA,+WAAC;oBAAI,WAAU;8BAAkB;;;;;;;;;;;;;;;;IAIzC;IAEA,qBACE,+WAAC;QAAI,WAAW;QAAW,OAAO;YAAE,GAAG,KAAK;YAAE;QAAU;kBACtD,cAAA,+WAAC,odAAc;YACb,OAAO;gBAAE,QAAQ;gBAAQ,OAAO;YAAO;YACvC,UAAU;gBAAE,uBAAuB;YAAK;sBAExC,cAAA,+WAAC;gBACC,WAAW;gBACX,QAAQ;gBACR,iBAAiB;gBACjB,UAAU;gBACV,aAAa;gBACb,gBAAgB;gBAChB,cAAc;gBACd,aAAa;gBACb,mBAAmB;gBACnB,gBAAgB;;;;;;;;;;;;;;;;AAK1B;IAtDM;MAAA;AAwDN,4CAA4C;AAC5C,MAAM,mBAAmB,IAAA,+VAAO,QAAC,IAAM,QAAQ,OAAO,CAAC,YAAY;IACjE,KAAK;IACL,SAAS,kBACP,+WAAC;YACC,WAAU;YACV,OAAO;gBAAE,WAAW;YAAQ;sBAE5B,cAAA,+WAAC;gBAAI,WAAU;0BAAkB;;;;;;;;;;;AAGvC;;uCAGe","debugId":null}}]
}